{"version":3,"sources":["webpack:///path---posts-calm-to-polish-sword-ghost-to-passport-89e7ee61784af9f15ea5.js","webpack:///./.cache/json/posts-calm-to-polish-sword-ghost-to-passport.json"],"names":["webpackJsonp","378","module","exports","data","markdownRemark","html","frontmatter","title","date","tag","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAw77CC,aAA2dC,MAAA,2BAAAC,KAAA,mBAAAC,IAAA,mBAAqFC,aAAgBC,KAAA","file":"path---posts-calm-to-polish-sword-ghost-to-passport-89e7ee61784af9f15ea5.js","sourcesContent":["webpackJsonp([173402839352015],{\n\n/***/ 378:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>其实一直有接触<a href=\\\"https://github.com/TryGhost/Ghost\\\">Ghost</a>这个博客系统，自从学习node开始，就有使用过这个系统，乃至现在公司的博客系统，都是使用这个搭建的，曾经没有好好的去看看源码。最近想要修改这个系统的后台系统，但是<a href=\\\"https://github.com/TryGhost/Ghost-Admin\\\">Ghost-Admin</a>的代码编译恕在下无能，真的有点难编译，或者可能就算编译通过了，也会比较难适应，于是就心生一个念头，自己写个<a href=\\\"https://github.com/guoshencheng/ghost-admin-react\\\">ghost-admin-react</a>，当然随之而来的就是这个这个后台系统的登录问题，虽然我们从原始后台系统的登录就可以了解这个系统的登录了，但是我们不妨一窥Ghost的登录源码，或许能有些惊喜。</p>\\n</blockquote>\\n<h3>Ghost里面的接口登录校验</h3>\\n<p>既然是接口的登录校验，那我们就直蹦<code class=\\\"language-text\\\">core/server/routes/api.js</code>的代码，我们会发现，这个Router在刚开始就声明了两种auth的中间件处理队列</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// no auth</span>\\n<span class=\\\"token keyword\\\">var</span> authenticatePublic <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateClient<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateUser<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>requiresAuthorizedUserPublicAPI\\n<span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token comment\\\">// auth</span>\\n<span class=\\\"token comment\\\">// Require user for private endpoints</span>\\n<span class=\\\"token keyword\\\">var</span> authenticatePrivate <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateClient<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateUser<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>requiresAuthorizedUser\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>从字面上就很容易理解，一个中间件是用于public的api的，一个中间件是用于private中间件的，那我们看一下<code class=\\\"language-text\\\">auth.js</code>这个中间件的实现吧</p>\\n<h5>authenticateClient</h5>\\n<p>先看一下代码吧</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticateClient</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//假如 在头部含有 authorization: Bearer &lt;access_token>，进入到下个中间件</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isBearerAutorizationHeader</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 否则，视为登录的请求</span>\\n    <span class=\\\"token comment\\\">//校验client_id 和 client_secret</span>\\n    <span class=\\\"token comment\\\">//...此处省略若干行</span>\\n    <span class=\\\"token comment\\\">//passport是一个用于处理请求校验的中间件, oauth2-client-password是一个校验client_id的passport中间件。</span>\\n    <span class=\\\"token keyword\\\">return</span> passport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'oauth2-client-password'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>session<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> failWithError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> client<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> origin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//处理错误 ...省略若干行代码</span>\\n        <span class=\\\"token comment\\\">//取 origin</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>headers <span class=\\\"token operator\\\">&amp;&amp;</span> req<span class=\\\"token punctuation\\\">.</span>headers<span class=\\\"token punctuation\\\">.</span>origin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          origin <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>headers<span class=\\\"token punctuation\\\">.</span>origin<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>hostname<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// passport 的策略处理中没有返回client的时候，报错, 此处省略该功能的若干行代码 if (!client || client.type !== 'ua') { ... } 如果是 ua 类型的 client直接进入下个中间件，关于client是怎么来的，我们后面会继续讲</span>\\n        <span class=\\\"token comment\\\">// 查看是否非有效的origin 如果有效，进入下个中间件，否则报错</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isValidOrigin</span><span class=\\\"token punctuation\\\">(</span>origin<span class=\\\"token punctuation\\\">,</span> client<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个中间件，首先是使用了<a href=\\\"https://github.com/jaredhanson/passport\\\">passport</a>，我们将会在后面继续介绍这个优秀的请求校验相关的中间件。这个中间件主要用于登录和公开api的校验，因为私有的请求应该会在校验<code class=\\\"language-text\\\">authorization: Bearer &lt;access_token&gt;</code>的时候就会进入下个中间件，所以我们在登录的时候，需要加入两个有效的client<em>id和client</em>secret的秘钥对，这个请求校验可以用于像很多的开放平台拥有一个publicKey和privateKey秘钥对的需求。</p>\\n<h5>authenticateUser</h5>\\n<p>老样子吧，我们先看代码，(<em>^__^</em>) 嘻嘻……</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticateUser</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 熟悉的味道，使用了passport, 使用了passport-http-bearer的passport插件，用于校验 你使用的 access_token是否符合bearer规则</span>\\n  <span class=\\\"token keyword\\\">return</span> passport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bearer'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>session<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> failWithError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 处理错误，省略若干代码</span>\\n      <span class=\\\"token comment\\\">// 校验 user，并带入到接下来的中间件中，否则报错</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        req<span class=\\\"token punctuation\\\">.</span>authInfo <span class=\\\"token operator\\\">=</span> info<span class=\\\"token punctuation\\\">;</span>\\n        req<span class=\\\"token punctuation\\\">.</span>user <span class=\\\"token operator\\\">=</span> user<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// ... 省略若干行代码</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个中间件是用于处理所有需要auth的请求的校验，所以所有需要auth的请求都需要在header里面加上一个<code class=\\\"language-text\\\">authorization: bearer &lt;access_token&gt;</code>，这样才能通过这个中间件的校验。</p>\\n<h5>requiresAuthorizedUser &#x26; requiresAuthorizedUserPublicAPI</h5>\\n<p>Ghost提供一个测试的选项，可以公开一些api，在这个选项打开的时候，我们可以访问一些接口，在这个选项没有打开的时候，<code class=\\\"language-text\\\">requiresAuthorizedUserPublicAPI</code>中间件等同于<code class=\\\"language-text\\\">requiresAuthorizedUser</code>，所以<code class=\\\"language-text\\\">authenticatePublic</code>也会等同于<code class=\\\"language-text\\\">authenticatePrivate</code>。</p>\\n<h5>小小总结一下</h5>\\n<p>我们现在看完了这个auth的middleware，主要校验两个，一个是头部的authorization，一个是client<em>secre和client</em>id，主要用了一个passport的中间件，这个中间件非常灵活，可以使用很多的插件。关于这个passport的预处理，我们可以从<code class=\\\"language-text\\\">auth-strategies.js</code>中找到，代码先不上了，比较无聊，就是从数据库中查询相应的数据并返回。</p>\\n<p>Ghost是一个比较古老的系统，以至于这个系统是需要node4来跑的，但是它从很早就开始使用了passport这个灵活的中间件，使用至今，passport仍然在发展，可见passport除了是一个非常优秀的中间件之外，还是一种非常好的设计模式，分离出了请求校验的这个模块，非常灵活。那么接下来，我们来了解一下这个中间件</p>\\n<h3>passport</h3>\\n<blockquote>\\n<p>上述的Ghost只是一个引子，引出的主要是今天的主角<a href=\\\"https://github.com/jaredhanson/passport\\\">passport</a>, passport是个处理请求的权限校验的中间件，是一个非常灵活的中间件，在express灵活的中间件系统中，独立了整个请求校验模块，使用插件的形式处理各种情况的校验。</p>\\n</blockquote>\\n<p>我们可以先看入口文件，emmm... 都是一些输出的代码，很无聊，我们直接开始看<code class=\\\"language-text\\\">authenticator.js</code>，这个文件输出的模块就是我们使用的<code class=\\\"language-text\\\">passport</code>。</p>\\n<h5>authenticator</h5>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Authenticator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_key <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'passport'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_strategies <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_serializers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_deserializers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_infoTransformers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_framework <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_userProperty <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'user'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>构造方法，无聊，初始化了一些属性，更多的属性会在init()中被初始化，其中<code class=\\\"language-text\\\">_userProperty</code>用于定义passport在作为中间件的时候在req注入的参数名</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Authenticator<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">framework</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fw<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_framework <span class=\\\"token operator\\\">=</span> fw<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nAuthenticator<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">init</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">framework</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./framework/connect'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SessionStrategy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>deserializeUser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_sm <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SessionManager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> key<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_key <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>serializeUser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这个<code class=\\\"language-text\\\">init</code>需要关联三个模块，framework/connect模块，strategies/session.js模块，sessionManager模块，session.js我们先放一边，这是一个策略，当我们读了<code class=\\\"language-text\\\">use</code>策略的代码之后，在回过头来看看这个代码，我们先来看看sessionManager这个模块</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">SessionManager<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">logIn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_serializeUser</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">.</span>user <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">[</span>self<span class=\\\"token punctuation\\\">.</span>_key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nSessionManager<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">logOut</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>_passport <span class=\\\"token operator\\\">&amp;&amp;</span> req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">delete</span> req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">.</span>user<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  cb <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个sessionManager的功能就和他的名字一样，是管理session中的user的，sessionManager分装了关于在session中添加用户信息和去除session中的用户信息的方法，我们可以知道passport的user信息是被存储在<code class=\\\"language-text\\\">req.session._passport.user</code>中的，这里的logOut我觉得是有问题的，因为<code class=\\\"language-text\\\">req.session._passport.user</code>并没有被删除。这也算是个不是特别有意思的模块。</p>\\n<p>相比之下framework/connect中的代码就很核心了。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">exports <span class=\\\"token operator\\\">=</span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">exports</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  exports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">__monkeypatchNode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    initialize<span class=\\\"token punctuation\\\">:</span> initialize<span class=\\\"token punctuation\\\">,</span>\\n    authenticate<span class=\\\"token punctuation\\\">:</span> authenticate\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">__monkeypatchNode</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> IncomingMessageExt <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../http/request'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>login <span class=\\\"token operator\\\">=</span>\\n  http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>logIn <span class=\\\"token operator\\\">=</span> IncomingMessageExt<span class=\\\"token punctuation\\\">.</span>logIn<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">//...省略若干行代码</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">__monkeypatchNode</code>这种函数应该很熟悉了，在运行时给内置函数加上补丁。给<code class=\\\"language-text\\\">http.IncomingMessage</code>加上了一些函数，req就是继承这个类的，这些函数定义在了<code class=\\\"language-text\\\">http/request.js</code>中，差不多就是logIn和logOut，和sessionManager对应。将authenticate和initialize输出。我们先看看initialize</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">exports</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>passport<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    req<span class=\\\"token punctuation\\\">.</span>_passport <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>instance <span class=\\\"token operator\\\">=</span> passport<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">&amp;&amp;</span> req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">[</span>passport<span class=\\\"token punctuation\\\">.</span>_key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// load data from existing session</span>\\n      req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">[</span>passport<span class=\\\"token punctuation\\\">.</span>_key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>该函数的主要作用是输出一个中间件，中间件会在request进入服务器之后注入一些属性，这个函数会在passport.initialize中被输出，所以在应用中使用passport前先使用这个中间件<code class=\\\"language-text\\\">app.use(passport.initialize())</code>，再来看看authenticate，这个函数会很长，开始的几行只是对参数做一下解析，解析出正确的参数，对不同的参数形式做一下兼容，之后返回了一个中间件，我们逐行来读一下这个<code class=\\\"language-text\\\">function authenticate(req, res, next)</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>logIn\\n    <span class=\\\"token operator\\\">&amp;&amp;</span> http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>logIn <span class=\\\"token operator\\\">!==</span> IncomingMessageExt<span class=\\\"token punctuation\\\">.</span>logIn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../framework/connect'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">__monkeypatchNode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>刚开始检查是否进行过monkeypatch，如果没有，先执行monkeypatch</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">allFailed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//定义一个失败的回调，</span>\\n  <span class=\\\"token comment\\\">// 如果在定义中间件的时候，定义了回调，直接调用回调函数</span>\\n  <span class=\\\"token comment\\\">// 如果没有定义回调会根据定义的参数进行设置并返回</span>\\n  <span class=\\\"token comment\\\">// options.failureFlash 将错误信息放置到session的flash</span>\\n  <span class=\\\"token comment\\\">// options.failureMessage 将错误的信息放到session.message</span>\\n  <span class=\\\"token comment\\\">// options.failureRedirect 重定向到制定的地址,</span>\\n  <span class=\\\"token comment\\\">// 如果没有定义failureRedirect 会直接返回错误</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>以上定义了一个失败的回调函数，会在接下来的函数中被调用，接下来的函数是passport去尝试调用passport策略插件。attempt函数，代码会带上一些注释。可以跟着我一起读</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">attempt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> layer <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 当最后都取不到layer的时候，调用失败的回调。</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>layer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">allFailed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 从策略的栈中获取到对应name的策略， 如果没有取到的话，报错</span>\\n  <span class=\\\"token keyword\\\">var</span> prototype <span class=\\\"token operator\\\">=</span> passport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_strategy</span><span class=\\\"token punctuation\\\">(</span>layer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>prototype<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Unknown authentication strategy \\\"'</span> <span class=\\\"token operator\\\">+</span> layer <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'\\\"'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 获取到strategy，并定义一些必要的函数</span>\\n  <span class=\\\"token keyword\\\">var</span> strategy <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">success</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 策略成功的函数，太长了就省略一下，有兴趣的可以去看一下，大致讲解一下逻辑</span>\\n    <span class=\\\"token comment\\\">// 如果定义了callback，执行callback</span>\\n    <span class=\\\"token comment\\\">// 大致的和失败回调的很像，根据options的选项和失败的回调一样</span>\\n    <span class=\\\"token comment\\\">// 执行req.logIn并根据选线重定向</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 在失败了之后将失败的一些信息加入到失败栈中，进入下一个循环</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">fail</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>challenge<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> challenge <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      status <span class=\\\"token operator\\\">=</span> challenge<span class=\\\"token punctuation\\\">;</span>\\n      challenge <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    failures<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> challenge<span class=\\\"token punctuation\\\">:</span> challenge<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">:</span> status <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">attempt</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 重定向</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">redirect</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    res<span class=\\\"token punctuation\\\">.</span>statusCode <span class=\\\"token operator\\\">=</span> status <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">302</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Location'</span><span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Content-Length'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 通过并继续下去</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">pass</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 抛出异常</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 执行策略插件的authenticate方法</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// attempt</span></code></pre>\\n      </div>\\n<p>该函数主要是去循环的取的注册的策略插件，逐个的调用策略插件的<code class=\\\"language-text\\\">authenticate</code>函数，在这个函数中，会调用上面注册的函数，从而返回、重定向或者继续循环。这是passport的中间件的核心代码，主要的功能是去循环注册的中间件，逐个通过authenticate处理，动态的将当前的对象作为参数，将方法注入到strategy，写的很通用很动态，这种写法也是在平时的代码编写中指的学习的。那么既然我们知道了策略插件的使用，那么我们现在可以来读一读session策略的代码了，也作为一个例子，看看是如何写策略的。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">SessionStrategy<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">authenticate</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 如果没有使用过initialize，报错</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'passport.initialize() middleware not in use'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 省略若干代码</span>\\n  <span class=\\\"token comment\\\">// su = req._passport.session.user: 看是否含有user</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>su <span class=\\\"token operator\\\">||</span> su <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//解析user</span>\\n    <span class=\\\"token keyword\\\">var</span> paused <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>pauseStream <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">pause</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_deserializeUser</span><span class=\\\"token punctuation\\\">(</span>su<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 省略若干代码</span>\\n      self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>paused<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        paused<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resume</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这个策略其实做的像是一个中间件，只调用了pass和error的参数，主要的功能在req中加入user其中user可以定义_userProperty来修改，我们要在应用开始的时候注册一下session的中间件，<code class=\\\"language-text\\\">app.use(passport.session())</code></p>\\n<h3>总结</h3>\\n<p>这次的源码主要是passport这个模块，前面的Ghost主要是用来引出这个模块的。针对这个passport，很明显，贯穿全局的设计模式就和他里面的strategy名字一样，策略模式，这个模块提供了一个非常好的策略模式的实现方法，将除了除了策略的通用的方法抽离出来，将策略抽象出来，我们只要去实现特定的策略，然后在特定的地方使用特定的策略就可以了。这种方法减少了代码的冗余，梳清了代码的逻辑，把唯一可变的东西抽象了出来单独实现，是一种很好的设计模式。</p>\",\"frontmatter\":{\"title\":\"静心打磨手中利刃之从Ghost到Passport\",\"date\":\"22 October, 2017\",\"tag\":\"静心打磨手中利刃,node\"}}},\"pathContext\":{\"slug\":\"calm-to-polish-sword-ghost-to-passport\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-calm-to-polish-sword-ghost-to-passport-89e7ee61784af9f15ea5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>其实一直有接触<a href=\\\"https://github.com/TryGhost/Ghost\\\">Ghost</a>这个博客系统，自从学习node开始，就有使用过这个系统，乃至现在公司的博客系统，都是使用这个搭建的，曾经没有好好的去看看源码。最近想要修改这个系统的后台系统，但是<a href=\\\"https://github.com/TryGhost/Ghost-Admin\\\">Ghost-Admin</a>的代码编译恕在下无能，真的有点难编译，或者可能就算编译通过了，也会比较难适应，于是就心生一个念头，自己写个<a href=\\\"https://github.com/guoshencheng/ghost-admin-react\\\">ghost-admin-react</a>，当然随之而来的就是这个这个后台系统的登录问题，虽然我们从原始后台系统的登录就可以了解这个系统的登录了，但是我们不妨一窥Ghost的登录源码，或许能有些惊喜。</p>\\n</blockquote>\\n<h3>Ghost里面的接口登录校验</h3>\\n<p>既然是接口的登录校验，那我们就直蹦<code class=\\\"language-text\\\">core/server/routes/api.js</code>的代码，我们会发现，这个Router在刚开始就声明了两种auth的中间件处理队列</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// no auth</span>\\n<span class=\\\"token keyword\\\">var</span> authenticatePublic <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateClient<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateUser<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>requiresAuthorizedUserPublicAPI\\n<span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token comment\\\">// auth</span>\\n<span class=\\\"token comment\\\">// Require user for private endpoints</span>\\n<span class=\\\"token keyword\\\">var</span> authenticatePrivate <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateClient<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>authenticateUser<span class=\\\"token punctuation\\\">,</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span>api<span class=\\\"token punctuation\\\">.</span>requiresAuthorizedUser\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>从字面上就很容易理解，一个中间件是用于public的api的，一个中间件是用于private中间件的，那我们看一下<code class=\\\"language-text\\\">auth.js</code>这个中间件的实现吧</p>\\n<h5>authenticateClient</h5>\\n<p>先看一下代码吧</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticateClient</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//假如 在头部含有 authorization: Bearer &lt;access_token>，进入到下个中间件</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isBearerAutorizationHeader</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 否则，视为登录的请求</span>\\n    <span class=\\\"token comment\\\">//校验client_id 和 client_secret</span>\\n    <span class=\\\"token comment\\\">//...此处省略若干行</span>\\n    <span class=\\\"token comment\\\">//passport是一个用于处理请求校验的中间件, oauth2-client-password是一个校验client_id的passport中间件。</span>\\n    <span class=\\\"token keyword\\\">return</span> passport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'oauth2-client-password'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>session<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> failWithError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> client<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> origin <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//处理错误 ...省略若干行代码</span>\\n        <span class=\\\"token comment\\\">//取 origin</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>headers <span class=\\\"token operator\\\">&amp;&amp;</span> req<span class=\\\"token punctuation\\\">.</span>headers<span class=\\\"token punctuation\\\">.</span>origin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          origin <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">parse</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>headers<span class=\\\"token punctuation\\\">.</span>origin<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>hostname<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// passport 的策略处理中没有返回client的时候，报错, 此处省略该功能的若干行代码 if (!client || client.type !== 'ua') { ... } 如果是 ua 类型的 client直接进入下个中间件，关于client是怎么来的，我们后面会继续讲</span>\\n        <span class=\\\"token comment\\\">// 查看是否非有效的origin 如果有效，进入下个中间件，否则报错</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isValidOrigin</span><span class=\\\"token punctuation\\\">(</span>origin<span class=\\\"token punctuation\\\">,</span> client<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个中间件，首先是使用了<a href=\\\"https://github.com/jaredhanson/passport\\\">passport</a>，我们将会在后面继续介绍这个优秀的请求校验相关的中间件。这个中间件主要用于登录和公开api的校验，因为私有的请求应该会在校验<code class=\\\"language-text\\\">authorization: Bearer &lt;access_token&gt;</code>的时候就会进入下个中间件，所以我们在登录的时候，需要加入两个有效的client<em>id和client</em>secret的秘钥对，这个请求校验可以用于像很多的开放平台拥有一个publicKey和privateKey秘钥对的需求。</p>\\n<h5>authenticateUser</h5>\\n<p>老样子吧，我们先看代码，(<em>^__^</em>) 嘻嘻……</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticateUser</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 熟悉的味道，使用了passport, 使用了passport-http-bearer的passport插件，用于校验 你使用的 access_token是否符合bearer规则</span>\\n  <span class=\\\"token keyword\\\">return</span> passport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bearer'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>session<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> failWithError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 处理错误，省略若干代码</span>\\n      <span class=\\\"token comment\\\">// 校验 user，并带入到接下来的中间件中，否则报错</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        req<span class=\\\"token punctuation\\\">.</span>authInfo <span class=\\\"token operator\\\">=</span> info<span class=\\\"token punctuation\\\">;</span>\\n        req<span class=\\\"token punctuation\\\">.</span>user <span class=\\\"token operator\\\">=</span> user<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// ... 省略若干行代码</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个中间件是用于处理所有需要auth的请求的校验，所以所有需要auth的请求都需要在header里面加上一个<code class=\\\"language-text\\\">authorization: bearer &lt;access_token&gt;</code>，这样才能通过这个中间件的校验。</p>\\n<h5>requiresAuthorizedUser &#x26; requiresAuthorizedUserPublicAPI</h5>\\n<p>Ghost提供一个测试的选项，可以公开一些api，在这个选项打开的时候，我们可以访问一些接口，在这个选项没有打开的时候，<code class=\\\"language-text\\\">requiresAuthorizedUserPublicAPI</code>中间件等同于<code class=\\\"language-text\\\">requiresAuthorizedUser</code>，所以<code class=\\\"language-text\\\">authenticatePublic</code>也会等同于<code class=\\\"language-text\\\">authenticatePrivate</code>。</p>\\n<h5>小小总结一下</h5>\\n<p>我们现在看完了这个auth的middleware，主要校验两个，一个是头部的authorization，一个是client<em>secre和client</em>id，主要用了一个passport的中间件，这个中间件非常灵活，可以使用很多的插件。关于这个passport的预处理，我们可以从<code class=\\\"language-text\\\">auth-strategies.js</code>中找到，代码先不上了，比较无聊，就是从数据库中查询相应的数据并返回。</p>\\n<p>Ghost是一个比较古老的系统，以至于这个系统是需要node4来跑的，但是它从很早就开始使用了passport这个灵活的中间件，使用至今，passport仍然在发展，可见passport除了是一个非常优秀的中间件之外，还是一种非常好的设计模式，分离出了请求校验的这个模块，非常灵活。那么接下来，我们来了解一下这个中间件</p>\\n<h3>passport</h3>\\n<blockquote>\\n<p>上述的Ghost只是一个引子，引出的主要是今天的主角<a href=\\\"https://github.com/jaredhanson/passport\\\">passport</a>, passport是个处理请求的权限校验的中间件，是一个非常灵活的中间件，在express灵活的中间件系统中，独立了整个请求校验模块，使用插件的形式处理各种情况的校验。</p>\\n</blockquote>\\n<p>我们可以先看入口文件，emmm... 都是一些输出的代码，很无聊，我们直接开始看<code class=\\\"language-text\\\">authenticator.js</code>，这个文件输出的模块就是我们使用的<code class=\\\"language-text\\\">passport</code>。</p>\\n<h5>authenticator</h5>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Authenticator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_key <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'passport'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_strategies <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_serializers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_deserializers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_infoTransformers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_framework <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_userProperty <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'user'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">init</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>构造方法，无聊，初始化了一些属性，更多的属性会在init()中被初始化，其中<code class=\\\"language-text\\\">_userProperty</code>用于定义passport在作为中间件的时候在req注入的参数名</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Authenticator<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">framework</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>fw<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_framework <span class=\\\"token operator\\\">=</span> fw<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nAuthenticator<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">init</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">framework</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./framework/connect'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SessionStrategy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>deserializeUser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_sm <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SessionManager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> key<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_key <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>serializeUser<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这个<code class=\\\"language-text\\\">init</code>需要关联三个模块，framework/connect模块，strategies/session.js模块，sessionManager模块，session.js我们先放一边，这是一个策略，当我们读了<code class=\\\"language-text\\\">use</code>策略的代码之后，在回过头来看看这个代码，我们先来看看sessionManager这个模块</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">SessionManager<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">logIn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_serializeUser</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">.</span>user <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">[</span>self<span class=\\\"token punctuation\\\">.</span>_key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nSessionManager<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">logOut</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> cb<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>_passport <span class=\\\"token operator\\\">&amp;&amp;</span> req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">delete</span> req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">.</span>user<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  cb <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">cb</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个sessionManager的功能就和他的名字一样，是管理session中的user的，sessionManager分装了关于在session中添加用户信息和去除session中的用户信息的方法，我们可以知道passport的user信息是被存储在<code class=\\\"language-text\\\">req.session._passport.user</code>中的，这里的logOut我觉得是有问题的，因为<code class=\\\"language-text\\\">req.session._passport.user</code>并没有被删除。这也算是个不是特别有意思的模块。</p>\\n<p>相比之下framework/connect中的代码就很核心了。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">exports <span class=\\\"token operator\\\">=</span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">exports</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  exports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">__monkeypatchNode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    initialize<span class=\\\"token punctuation\\\">:</span> initialize<span class=\\\"token punctuation\\\">,</span>\\n    authenticate<span class=\\\"token punctuation\\\">:</span> authenticate\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nexports<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">__monkeypatchNode</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> IncomingMessageExt <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../http/request'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>login <span class=\\\"token operator\\\">=</span>\\n  http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>logIn <span class=\\\"token operator\\\">=</span> IncomingMessageExt<span class=\\\"token punctuation\\\">.</span>logIn<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">//...省略若干行代码</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">__monkeypatchNode</code>这种函数应该很熟悉了，在运行时给内置函数加上补丁。给<code class=\\\"language-text\\\">http.IncomingMessage</code>加上了一些函数，req就是继承这个类的，这些函数定义在了<code class=\\\"language-text\\\">http/request.js</code>中，差不多就是logIn和logOut，和sessionManager对应。将authenticate和initialize输出。我们先看看initialize</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">exports</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>passport<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">initialize</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    req<span class=\\\"token punctuation\\\">.</span>_passport <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>instance <span class=\\\"token operator\\\">=</span> passport<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">&amp;&amp;</span> req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">[</span>passport<span class=\\\"token punctuation\\\">.</span>_key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// load data from existing session</span>\\n      req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">.</span>session <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>session<span class=\\\"token punctuation\\\">[</span>passport<span class=\\\"token punctuation\\\">.</span>_key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>该函数的主要作用是输出一个中间件，中间件会在request进入服务器之后注入一些属性，这个函数会在passport.initialize中被输出，所以在应用中使用passport前先使用这个中间件<code class=\\\"language-text\\\">app.use(passport.initialize())</code>，再来看看authenticate，这个函数会很长，开始的几行只是对参数做一下解析，解析出正确的参数，对不同的参数形式做一下兼容，之后返回了一个中间件，我们逐行来读一下这个<code class=\\\"language-text\\\">function authenticate(req, res, next)</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>logIn\\n    <span class=\\\"token operator\\\">&amp;&amp;</span> http<span class=\\\"token punctuation\\\">.</span>IncomingMessage<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>logIn <span class=\\\"token operator\\\">!==</span> IncomingMessageExt<span class=\\\"token punctuation\\\">.</span>logIn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'../framework/connect'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">__monkeypatchNode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>刚开始检查是否进行过monkeypatch，如果没有，先执行monkeypatch</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">allFailed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//定义一个失败的回调，</span>\\n  <span class=\\\"token comment\\\">// 如果在定义中间件的时候，定义了回调，直接调用回调函数</span>\\n  <span class=\\\"token comment\\\">// 如果没有定义回调会根据定义的参数进行设置并返回</span>\\n  <span class=\\\"token comment\\\">// options.failureFlash 将错误信息放置到session的flash</span>\\n  <span class=\\\"token comment\\\">// options.failureMessage 将错误的信息放到session.message</span>\\n  <span class=\\\"token comment\\\">// options.failureRedirect 重定向到制定的地址,</span>\\n  <span class=\\\"token comment\\\">// 如果没有定义failureRedirect 会直接返回错误</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>以上定义了一个失败的回调函数，会在接下来的函数中被调用，接下来的函数是passport去尝试调用passport策略插件。attempt函数，代码会带上一些注释。可以跟着我一起读</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">attempt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> layer <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 当最后都取不到layer的时候，调用失败的回调。</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>layer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">allFailed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 从策略的栈中获取到对应name的策略， 如果没有取到的话，报错</span>\\n  <span class=\\\"token keyword\\\">var</span> prototype <span class=\\\"token operator\\\">=</span> passport<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_strategy</span><span class=\\\"token punctuation\\\">(</span>layer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>prototype<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Unknown authentication strategy \\\"'</span> <span class=\\\"token operator\\\">+</span> layer <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'\\\"'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 获取到strategy，并定义一些必要的函数</span>\\n  <span class=\\\"token keyword\\\">var</span> strategy <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">create</span><span class=\\\"token punctuation\\\">(</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">success</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 策略成功的函数，太长了就省略一下，有兴趣的可以去看一下，大致讲解一下逻辑</span>\\n    <span class=\\\"token comment\\\">// 如果定义了callback，执行callback</span>\\n    <span class=\\\"token comment\\\">// 大致的和失败回调的很像，根据options的选项和失败的回调一样</span>\\n    <span class=\\\"token comment\\\">// 执行req.logIn并根据选线重定向</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 在失败了之后将失败的一些信息加入到失败栈中，进入下一个循环</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">fail</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>challenge<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> challenge <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'number'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      status <span class=\\\"token operator\\\">=</span> challenge<span class=\\\"token punctuation\\\">;</span>\\n      challenge <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    failures<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> challenge<span class=\\\"token punctuation\\\">:</span> challenge<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">:</span> status <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">attempt</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 重定向</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">redirect</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    res<span class=\\\"token punctuation\\\">.</span>statusCode <span class=\\\"token operator\\\">=</span> status <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">302</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Location'</span><span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Content-Length'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'0'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 通过并继续下去</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">pass</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 抛出异常</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 执行策略插件的authenticate方法</span>\\n  strategy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">authenticate</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// attempt</span></code></pre>\\n      </div>\\n<p>该函数主要是去循环的取的注册的策略插件，逐个的调用策略插件的<code class=\\\"language-text\\\">authenticate</code>函数，在这个函数中，会调用上面注册的函数，从而返回、重定向或者继续循环。这是passport的中间件的核心代码，主要的功能是去循环注册的中间件，逐个通过authenticate处理，动态的将当前的对象作为参数，将方法注入到strategy，写的很通用很动态，这种写法也是在平时的代码编写中指的学习的。那么既然我们知道了策略插件的使用，那么我们现在可以来读一读session策略的代码了，也作为一个例子，看看是如何写策略的。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">SessionStrategy<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">authenticate</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 如果没有使用过initialize，报错</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>req<span class=\\\"token punctuation\\\">.</span>_passport<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'passport.initialize() middleware not in use'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 省略若干代码</span>\\n  <span class=\\\"token comment\\\">// su = req._passport.session.user: 看是否含有user</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>su <span class=\\\"token operator\\\">||</span> su <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//解析user</span>\\n    <span class=\\\"token keyword\\\">var</span> paused <span class=\\\"token operator\\\">=</span> options<span class=\\\"token punctuation\\\">.</span>pauseStream <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">pause</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_deserializeUser</span><span class=\\\"token punctuation\\\">(</span>su<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> user<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 省略若干代码</span>\\n      self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>paused<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        paused<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resume</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这个策略其实做的像是一个中间件，只调用了pass和error的参数，主要的功能在req中加入user其中user可以定义_userProperty来修改，我们要在应用开始的时候注册一下session的中间件，<code class=\\\"language-text\\\">app.use(passport.session())</code></p>\\n<h3>总结</h3>\\n<p>这次的源码主要是passport这个模块，前面的Ghost主要是用来引出这个模块的。针对这个passport，很明显，贯穿全局的设计模式就和他里面的strategy名字一样，策略模式，这个模块提供了一个非常好的策略模式的实现方法，将除了除了策略的通用的方法抽离出来，将策略抽象出来，我们只要去实现特定的策略，然后在特定的地方使用特定的策略就可以了。这种方法减少了代码的冗余，梳清了代码的逻辑，把唯一可变的东西抽象了出来单独实现，是一种很好的设计模式。</p>\",\"frontmatter\":{\"title\":\"静心打磨手中利刃之从Ghost到Passport\",\"date\":\"22 October, 2017\",\"tag\":\"静心打磨手中利刃,node\"}}},\"pathContext\":{\"slug\":\"calm-to-polish-sword-ghost-to-passport\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-calm-to-polish-sword-ghost-to-passport.json\n// module id = 378\n// module chunks = 173402839352015"],"sourceRoot":""}