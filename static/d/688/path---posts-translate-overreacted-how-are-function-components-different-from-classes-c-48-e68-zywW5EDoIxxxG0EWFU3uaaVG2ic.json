{"data":{"markdownRemark":{"html":"<p>React的函数申明组件和类申明的组件到底有什么不同？</p>\n<p>有一段时间，一个普遍的答案就是类申明的组件会提供更多的功能（比如state）。但是当<a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>出现了之后这种说法就不对了。</p>\n<p>可能你会听说，他们中的其中一种会有更好的性能。那么究竟是哪个呢？很多标准都是<a href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------\">有缺陷的</a>。所以在通过这些标准来获得结论的时候需要谨慎。性能最重要的还是在于你的代码本身而不是在于你选择了用类来申明还是用函数。在我看来，即使它们在吸能你优化的策略上面有些许的<a href=\"https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render\">不同</a>，性能的差异是很小的。</p>\n<p>无论在上面说的什么情况下，我们都<a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both\">不推荐</a>你将你的原有组件换一个申明方式重写。但如果你有什么特殊原因，别多想，乘早选择合适的方案。Hooks还非常的新(就像2014年de React一样)，类似于\"最好的体验\"的建议并没有写到教程里面去。</p>\n<p>So where does that leave us? Are there any fundamental differences between React functions and classes at all? Of course, there are — in the mental model. <strong>In this post, I will look at the biggest difference between them.</strong> It existed ever since function components were <a href=\"https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\">introduced</a> in 2015 but it’s often overlooked:</p>\n<blockquote>\n<p><strong>Function components capture the rendered values.</strong></p>\n</blockquote>\n<p>Let’s unpack what this means.</p>\n<hr>\n<p><strong>Note: this post isn’t a value judgement of either classes or functions. I’m only describing the difference between these two programming models in React. For questions about adopting functions more widely, refer to the <a href=\"https://reactjs.org/docs/hooks-faq.html#adoption-strategy\">Hooks FAQ</a>.</strong></p>\n<hr>\n<p>Consider this component:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It shows a button that simulates a network request with <code class=\"language-text\">setTimeout</code> and then shows a confirmation alert. For example, if <code class=\"language-text\">props.user</code> is <code class=\"language-text\">&#39;Dan&#39;</code>, it will show <code class=\"language-text\">&#39;Followed Dan&#39;</code> after three seconds. Simple enough.</p>\n<p><em>(Note it doesn’t matter whether I use arrows or function declarations in the above example. <code class=\"language-text\">function handleClick()</code> would work exactly the same way.)</em></p>\n<p>How do we write it as a class? A naïve translation might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is common to think these two snippets of code are equivalent. People often freely refactor between these patterns without noticing their implications:</p>\n<p><img src=\"./wtf.gif\" alt=\"Spot the difference between two versions\"></p>\n<p><strong>However, these two snippets of code are subtly different.</strong> Take a good look at them. Do you see the difference yet? Personally, it took me a while to see this.</p>\n<p><strong>There are spoilers ahead so here’s a <a href=\"https://codesandbox.io/s/pjqnl16lm7\">live demo</a> if you wanna figure it out on your own.</strong> The rest of this article explains the difference and why it matters.</p>\n<hr>\n<p>Before we continue, I’d like to emphasize that the difference I’m describing has nothing to do with React Hooks per se. Examples above don’t even use Hooks!</p>\n<p>It’s all about the difference between functions and classes in React. If you plan to use functions more often in a React app, you might want to understand it.</p>\n<hr>\n<p><strong>We’ll illustrate the difference with a bug that is common in React applications.</strong></p>\n<p>Open this <strong><a href=\"https://codesandbox.io/s/pjqnl16lm7\">example sandbox</a></strong> with a current profile selector and the two <code class=\"language-text\">ProfilePage</code> implementations from above — each rendering a Follow button.</p>\n<p>Try this sequence of actions with both buttons:</p>\n<ol>\n<li><strong>Click</strong> one of the Follow buttons.</li>\n<li><strong>Change</strong> the selected profile before 3 seconds pass.</li>\n<li><strong>Read</strong> the alert text.</li>\n</ol>\n<p>You will notice a peculiar difference:</p>\n<ul>\n<li>\n<p>With the above <code class=\"language-text\">ProfilePage</code> <strong>function</strong>, clicking Follow on Dan’s profile and then navigating to Sophie’s would still alert <code class=\"language-text\">&#39;Followed Dan&#39;</code>.</p>\n</li>\n<li>\n<p>With the above <code class=\"language-text\">ProfilePage</code> <strong>class</strong>, it would alert <code class=\"language-text\">&#39;Followed Sophie&#39;</code>:</p>\n</li>\n</ul>\n<p><img src=\"./bug.gif\" alt=\"Demonstration of the steps\"></p>\n<hr>\n<p>In this example, the first behavior is the correct one. <strong>If I follow a person and then navigate to another person’s profile, my component shouldn’t get confused about who I followed.</strong> This class implementation is clearly buggy. </p>\n<p><em>(You should totally <a href=\"https://mobile.twitter.com/sophiebits\">follow Sophie</a> though.)</em></p>\n<hr>\n<p>So why does our class example behave this way?</p>\n<p>Let’s look closely at the <code class=\"language-text\">showMessage</code> method in our class:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This class method reads from <code class=\"language-text\">this.props.user</code>. Props are immutable in React so they can never change. <strong>However, <code class=\"language-text\">this</code> <em>is</em>, and has always been, mutable.</strong></p>\n<p>Indeed, that’s the whole purpose of <code class=\"language-text\">this</code> in a class. React itself mutates it over time so that you can read the fresh version in the <code class=\"language-text\">render</code> and lifecycle methods.</p>\n<p>So if our component re-renders while the request is in flight, <code class=\"language-text\">this.props</code> will change. The <code class=\"language-text\">showMessage</code> method reads the <code class=\"language-text\">user</code> from the “too new” <code class=\"language-text\">props</code>.</p>\n<p>This exposes an interesting observation about the nature of user interfaces. If we say that a UI is conceptually a function of current application state, <strong>the event handlers are a part of the render result — just like the visual output</strong>. Our event handlers “belong” to a particular render with particular props and state.</p>\n<p>However, scheduling a timeout whose callback reads <code class=\"language-text\">this.props</code> breaks that association. Our <code class=\"language-text\">showMessage</code> callback is not “tied” to any particular render, and so it “loses” the correct props. Reading from <code class=\"language-text\">this</code> severed that connection.</p>\n<hr>\n<p><strong>Let’s say function components didn’t exist.</strong> How would we solve this problem?</p>\n<p>We’d want to somehow “repair” the connection between the <code class=\"language-text\">render</code> with the correct props and the <code class=\"language-text\">showMessage</code> callback that reads them. Somewhere along the way the <code class=\"language-text\">props</code> get lost.</p>\n<p>One way to do it would be to read <code class=\"language-text\">this.props</code> early during the event, and then explicitly pass them through into the timeout completion handler:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This <a href=\"https://codesandbox.io/s/3q737pw8lq\">works</a>. However, this approach makes the code significantly more verbose and error-prone with time. What if we needed more than a single prop? What if we also needed to access the state? <strong>If <code class=\"language-text\">showMessage</code> calls another method, and that method reads <code class=\"language-text\">this.props.something</code> or <code class=\"language-text\">this.state.something</code>, we’ll have the exact same problem again.</strong> So we would have to pass <code class=\"language-text\">this.props</code> and <code class=\"language-text\">this.state</code> as arguments through every method called from <code class=\"language-text\">showMessage</code>.</p>\n<p>Doing so defeats the ergonomics normally afforded by a class. It is also difficult to remember or enforce, which is why people often settle for bugs instead.</p>\n<p>Similarly, inlining the <code class=\"language-text\">alert</code> code inside <code class=\"language-text\">handleClick</code> doesn’t answer the bigger problem. We want to structure the code in a way that allows splitting it into more methods <em>but</em> also reading the props and state that correspond to the render related to that call. <strong>This problem isn’t even unique to React — you can reproduce it in any UI library that puts data into a mutable object like <code class=\"language-text\">this</code>.</strong></p>\n<p>Perhaps, we could <em>bind</em> the methods in the constructor?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No, this doesn’t fix anything. Remember, the problem is us reading from <code class=\"language-text\">this.props</code> too late — not with the syntax we’re using! <strong>However, the problem would go away if we fully relied on JavaScript closures.</strong></p>\n<p>Closures are often avoided because it’s <a href=\"https://wsvincent.com/javascript-closure-settimeout-for-loop/\">hard</a> to think about a value that can be mutated over time. But in React, props and state are immutable! (Or at least, it’s a strong recommendation.) That removes a major footgun of closures.</p>\n<p>This means that if you close over props or state from a particular render, you can always count on them staying exactly the same:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Capture the props!</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>\n    <span class=\"token comment\">// Note: we are *inside render*.</span>\n    <span class=\"token comment\">// These aren't class methods.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>You’ve “captured” props at the time of render:</strong></p>\n<p><img src=\"./pokemon.gif\" alt=\"Capturing Pokemon\"></p>\n<p>This way any code inside it (including <code class=\"language-text\">showMessage</code>) is guaranteed to see the props for this particular render. React doesn’t “move our cheese” anymore.</p>\n<p><strong>We could then add as many helper functions inside as we want, and they would all use the captured props and state.</strong> Closures to the rescue!</p>\n<hr>\n<p>The <a href=\"https://codesandbox.io/s/oqxy9m7om5\">example above</a> is correct but it looks odd. What’s the point of having a class if you define functions inside <code class=\"language-text\">render</code> instead of using class methods?</p>\n<p>Indeed, we can simplify the code by removing the class “shell” around it:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Just like above, the <code class=\"language-text\">props</code> are still being captured — React passes them as an argument. <strong>Unlike <code class=\"language-text\">this</code>, the <code class=\"language-text\">props</code> object itself is never mutated by React.</strong></p>\n<p>It’s a bit more obvious if you destructure <code class=\"language-text\">props</code> in the function definition:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the parent component renders <code class=\"language-text\">ProfilePage</code> with different props, React will call the <code class=\"language-text\">ProfilePage</code> function again. But the event handler we already clicked “belonged” to the previous render with its own <code class=\"language-text\">user</code> value and the <code class=\"language-text\">showMessage</code> callback that reads it. They’re all left intact.</p>\n<p>This is why, in the function version of <a href=\"https://codesandbox.io/s/pjqnl16lm7\">this demo</a>, clicking Follow on Sophie’s profile and then changing selection to Sunil would alert <code class=\"language-text\">&#39;Followed Sophie&#39;</code>:</p>\n<p><img src=\"./fix.gif\" alt=\"Demo of correct behavior\"></p>\n<p>This behavior is correct. <em>(Although you might want to <a href=\"https://mobile.twitter.com/threepointone\">follow Sunil</a> too!)</em></p>\n<hr>\n<p>Now we understand the big difference between functions and classes in React:</p>\n<blockquote>\n<p><strong>Function components capture the rendered values.</strong></p>\n</blockquote>\n<p><strong>With Hooks, the same principle applies to state as well.</strong> Consider this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMessageChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleMessageChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSendClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Send</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Here’s a <a href=\"https://codesandbox.io/s/93m5mz9w24\">live demo</a>.)</p>\n<p>While this isn’t a very good message app UI, it illustrates the same point: if I send a particular message, the component shouldn’t get confused about which message actually got sent. This function component’s <code class=\"language-text\">message</code> captures the state that “belongs” to the render which returned the click handler called by the browser. So the <code class=\"language-text\">message</code> is set to what was in the input when I clicked “Send”.</p>\n<hr>\n<p>So we know functions in React capture props and state by default. <strong>But what if we <em>want</em> to read the latest props or state that don’t belong to this particular render?</strong> What if we want to <a href=\"https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2\">“read them from the future”</a>?</p>\n<p>In classes, you’d do it by reading <code class=\"language-text\">this.props</code> or <code class=\"language-text\">this.state</code> because <code class=\"language-text\">this</code> itself is mutable. React mutates it. In function components, you can also have a mutable value that is shared by all component renders. It’s called a “ref”:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// You can read or write `ref.current`.</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, you’ll have to manage it yourself.</p>\n<p>A ref <a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\">plays the same role</a> as an instance field. It’s the escape hatch into the mutable imperative world. You may be familiar with “DOM refs” but the concept is much more general. It’s just a box into which you can put something.</p>\n<p>Even visually, <code class=\"language-text\">this.something</code> looks like a mirror of <code class=\"language-text\">something.current</code>. They represent the same concept.</p>\n<p>By default, React doesn’t create refs for latest props or state in function components. In many cases you don’t need them, and it would be wasted work to assign them. However, you can track the value manually if you’d like:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestMessage <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> latestMessage<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMessageChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    latestMessage<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we read <code class=\"language-text\">message</code> in <code class=\"language-text\">showMessage</code>, we’ll see the message at the time we pressed the Send button. But when we read <code class=\"language-text\">latestMessage.current</code>, we get the latest value — even if we kept typing after the Send button was pressed.</p>\n<p>You can compare the <a href=\"https://codesandbox.io/s/93m5mz9w24\">two</a> <a href=\"https://codesandbox.io/s/ox200vw8k9\">demos</a> to see the difference yourself. A ref is a way to “opt out” of the rendering consistency, and can be handy in some cases.</p>\n<p>Generally, you should avoid reading or setting refs <em>during</em> rendering because they’re mutable. We want to keep the rendering predictable. <strong>However, if we want to get the latest value of a particular prop or state, it can be annoying to update the ref manually.</strong> We could automate it by using an effect:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Keep track of the latest value.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestMessage <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    latestMessage<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> latestMessage<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(Here’s a <a href=\"https://codesandbox.io/s/yqmnz7xy8x\">demo</a>.)</p>\n<p>We do the assignment <em>inside</em> an effect so that the ref value only changes after the DOM has been updated. This ensures our mutation doesn’t break features like <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Time Slicing and Suspense</a> which rely on interruptible rendering.</p>\n<p>Using a ref like this isn’t necessary very often. <strong>Capturing props or state is usually a better default.</strong> However, it can be handy when dealing with <a href=\"/making-setinterval-declarative-with-react-hooks/\">imperative APIs</a> like intervals and subscriptions. Remember that you can track <em>any</em> value like this — a prop, a state variable, the whole props object, or even a function.</p>\n<p>This pattern can also be handy for optimizations — such as when <code class=\"language-text\">useCallback</code> identity changes too often. However, <a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\">using a reducer</a> is often a <a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\">better solution</a>. (A topic for a future blog post!)</p>\n<hr>\n<p>In this post, we’ve looked at common broken pattern in classes, and how closures help us fix it. However, you might have noticed that when you try to optimize Hooks by specifying a dependency array, you can run into bugs with stale closures. Does it mean that closures are the problem? I don’t think so.</p>\n<p>As we’ve seen above, closures actually help us <em>fix</em> the subtle problems that are hard to notice. Similarly, they make it much easier to write code that works correctly in the <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Concurrent Mode</a>. This is possible because the logic inside the component closes over the correct props and state with which it was rendered.</p>\n<p>In all cases I’ve seen so far, <strong>the “stale closures” problems happen due to a mistaken assumption that “functions don’t change” or that “props are always the same”</strong>. This is not the case, as I hope this post has helped to clarify.</p>\n<p>Functions close over their props and state — and so their identity is just as important. This is not a bug, but a feature of function components. Functions shouldn’t be excluded from the “dependencies array” for <code class=\"language-text\">useEffect</code> or <code class=\"language-text\">useCallback</code>, for example. (The right fix is usually either <code class=\"language-text\">useReducer</code> or the <code class=\"language-text\">useRef</code> solution above — we will soon document how to choose between them.)</p>\n<p>When we write the majority of our React code with functions, we need to adjust our intuition about <a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\">optimizing code</a> and <a href=\"https://github.com/facebook/react/issues/14920\">what values can change over time</a>.</p>\n<p>As <a href=\"https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096\">Fredrik put it</a>:</p>\n<blockquote>\n<p>The best mental rule I’ve found so far with hooks is ”code as if any value can change at any time”.</p>\n</blockquote>\n<p>Functions are no exception to this rule. It will take some time for this to be common knowledge in React learning materials. It requires some adjustment from the class mindset. But I hope this article helps you see it with fresh eyes.</p>\n<p>React functions always capture their values — and now we know why.</p>\n<p><img src=\"./pikachu.gif\" alt=\"Smiling Pikachu\"></p>\n<p>They’re a whole different Pokémon.</p>","frontmatter":{"title":"翻译：函数申明的组件和类申明的组件区别在哪里","date":"27 March, 2019","tag":"translate,overreacted"},"excerpt":"React的函数申明组件和类申明的组件到底有什么不同？ 有一段时间，一个普遍的答案就是类申明的组件会提供更多的功能（比如state）。但是当 Hooks…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"translate-overreacted-how-are-function-components-different-from-classes"}}