{"data":{"markdownRemark":{"html":"<blockquote>\n<p>本文出自<a href=\"https://overreacted.io/\">overreacted</a>，这是<a href=\"https://mobile.twitter.com/dan_abramov\">Dan Abramov</a>写的博客，我觉得对很有用所以特意做了这个翻译<a href=\"/posts/overreacted\">系列</a>，原文链接请查看<a href=\"https://overreacted.io/why-isnt-x-a-hook/\">这里</a></p>\n</blockquote>\n<p>自从第一个拥有<a href=\"https://reactjs.org/hooks\">React Hooks</a>的React的alpha版本发布之后。不断地会有人提出一些类似于这样的问题: \"为什么 <em>某个API</em> 不做成Hook\"。</p>\n<p>我们先来回顾一下，现已经有的是以下这些Hook:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code class=\"language-text\">useState()</code></a> 让你能够定义组件内状态</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\"><code class=\"language-text\">useEffect()</code></a> 让你能够定义一些Effect</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\"><code class=\"language-text\">useContext()</code></a> 让你能够读取context中的值</li>\n</ul>\n<p>但是，还有一些API，比如<code class=\"language-text\">React.memo()</code>和<code class=\"language-text\">&lt;Context.Provider&gt;</code>，这些还<em>没有</em>做成Hooks。\nBut there are some other APIs, like <code class=\"language-text\">React.memo()</code> and <code class=\"language-text\">&lt;Context.Provider&gt;</code>, that are <em>not</em> Hooks. Commonly proposed Hook versions of them would be <em>noncompositional</em> or <em>antimodular</em>. This article will help you understand why.</p>\n<p><strong>备注：这篇文章可以帮助那些对API内部感兴趣的人更深度的理解React的API。如果只是为了在现实生产中使用，不需要关心这些</strong></p>\n<hr>\n<p>这里有两点我们期望React API能够保持的:</p>\n<ol>\n<li>\n<p><strong>可整合性</strong>: <a href=\"https://reactjs.org/docs/hooks-custom.html\">自定义Hooks</a>是我们队Hooks API 对期待的功能点。我们期望开发者能够更加频繁的创建他们自己的Hook，所以我们必须保证所有人都能够<a href=\"https://overreacted.io/why-do-hooks-rely-on-call-order/#flaw-4-the-diamond-problem\">正确的</a>使用Hooks</p>\n</li>\n<li>\n<p><strong>调试体验</strong>: 即使应用在不断变大，我们期望bug调试依然是<a href=\"https://overreacted.io/the-bug-o-notation/\">简单的</a>。React亮点之一就是当你发现页面上有什么问题的时候，你可以通过遍历React树来找到出问题的那个组件的状态值。</p>\n</li>\n</ol>\n<p>这两点限制了我们对Hook的可为和不可为。让我们来看一些例子吧。</p>\n<hr>\n<h2>一个已经存在的Hook: <code class=\"language-text\">useState()</code></h2>\n<h3>可整合性</h3>\n<p>多个自定义Hook在调用<code class=\"language-text\">useState()</code>的时候不会冲突:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// What happens here, stays here.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// What happens here, stays here.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每添加一个无条件的<code class=\"language-text\">useState()</code>都是安全的。你不用关心当前组件使用到的其他的自定义Hook是不是定义了其他的状态变量。你也不用担心你会不小心更新其他的状态。</p>\n<p><strong>审判书</strong> ✅<code class=\"language-text\">useState</code>没有让React变的更加脆弱。</p>\n<h3>调试体验</h3>\n<p>Hooks非常有用，你可以将变量在它们之间传递:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isMobile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> isMobile <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MOBILE_VIEWPORT</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>section className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但假如我们的代码写错了呢，我们应该怎么调试?</p>\n<p>就比如说假如<code class=\"language-text\">theme.comment</code>传递到class的值有问题。我们应该怎么调试呢？我们可以在组件体中大断点或者输出一些日志。</p>\n<p>你可能会看到<code class=\"language-text\">theme</code>的值不对，但是<code class=\"language-text\">width</code>和<code class=\"language-text\">isMobile</code>是正确的。这就让我们知道了问题出在<code class=\"language-text\">useTheme()</code>。或者我们可以查看一下是不是<code class=\"language-text\">width</code>本身就是有问题的，如果有问题那我们就要去查看一下<code class=\"language-text\">useWindowWidth()</code>。</p>\n<p><strong>简单直接的看一下这些变量的值我们就能够知道是哪个Hook产生的bug</strong> 我们不用去查看所有Hook的实现。</p>\n<p>然后我们就可以\"深入\"到哪个有问题的Hook中，重复检查哪个值产生的问题。</p>\n<p>这在Hooks的深度增加的时候变得非常重要。假如我们的自定义Hook嵌套了三层，每层都用了不同的自定义Hook。那么只检查<strong>三个地方</strong>和需要检查潜在的<strong>3 + 3 * 3 + 3 * 3 * 3 = 39 个地方</strong>是有着巨大的<a href=\"https://overreacted.io/the-bug-o-notation/\">差距</a>的。幸运的是，<code class=\"language-text\">useState()</code>是不会在Hook和组件之间互相影响的。有问题的数据只是在Hook的最后被遗留下来，就好像是申明一个变量一样。🐛</p>\n<p><strong>审判书:</strong> ✅ <code class=\"language-text\">useState()</code>不会让我们的代码逻辑关系混乱。我们可以顺藤摸瓜的找到这个bug。</p>\n<hr>\n<h2>这不是Hook: <code class=\"language-text\">useBailout()</code></h2>\n<p>我们在做优化的时候，组件可以使用Hook让重新渲染不是那么频繁。</p>\n<p>实现这个效果的一种方式就是使用<a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\"><code class=\"language-text\">React.memo()</code></a>来包裹整个组件。这个函数的作用在于，当props和老的props浅比较相等的时候，我们可以不让组件重新渲染。就好像我们在类声明的组件中使用<code class=\"language-text\">PureComponent</code>一样。</p>\n<p><code class=\"language-text\">React.memo()</code>接收一个组件并返回一个组件:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>但是 为什么不做成Hook?</strong></p>\n<p>无论你怎么称呼他<code class=\"language-text\">useShouldComponentUpdate()</code>, <code class=\"language-text\">usePure()</code>, <code class=\"language-text\">useSkipRender()</code>, or <code class=\"language-text\">useBailout()</code>, 这个提案大概使用像这样:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ⚠️ Not a real API</span>\n  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevColor</span> <span class=\"token operator\">=></span> prevColor <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>  \n      <span class=\"token constant\">OK</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上的变种还有很多(比如<code class=\"language-text\">usePure()</code>)，但是广义上还有一些缺陷。</p>\n<h3>可组合性</h3>\n<p>就举个例子，比如我们期望将<code class=\"language-text\">useBailout()</code>放到我们两个不同的自定义Hook中:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Not a real API</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevIsOnline</span> <span class=\"token operator\">=></span> prevIsOnline <span class=\"token operator\">!==</span> isOnline<span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Not a real API</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevWidth</span> <span class=\"token operator\">=></span> prevWidth <span class=\"token operator\">!==</span> width<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>那么当我们在同一个组件使用两次这个Hook会发生什么呢？</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ChatLayout width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>FriendStatus isOnline<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ChatLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>那么什么时候会重新渲染呢?</p>\n<p>如果每一个<code class=\"language-text\">useBailout()</code>都能够跳过重新渲染，那么被允许的<code class=\"language-text\">useWindowWidth()</code>更新有可能会阻碍<code class=\"language-text\">useFriendStatus()</code>的更新，反之亦然。<strong>这些Hook会互相阻碍</strong>。</p>\n<p>而且，就算是<code class=\"language-text\">useBailout()</code>只有在所有的调用都\"同意\"阻止一次更新的时候才阻止更新，那么我们的<code class=\"language-text\">ChatThread</code>在<code class=\"language-text\">isTyping</code>属性变更的时候就会更新失败了。</p>\n<p>更糟糕的是，像这样的语法 <strong>之后新的调用<code class=\"language-text\">useBailout()</code>的Hook被加入到<code class=\"language-text\">ChatThread</code>中</strong>，但是，我们不能\"反对\"在<code class=\"language-text\">useWindowWidth()</code>和<code class=\"language-text\">useFriendStatus()</code>中使用bailout之类的Hook。</p>\n<p><strong>宣判：</strong> 🔴 <code class=\"language-text\">useBailout()</code> 打破了可组合性的规则。将这样的Hook加入到组件中，会破坏其他Hook中的state的更新。我们期望我们的API能够更加<a href=\"https://overreacted.io/optimized-for-change/\">坚固</a>，但是这种行为为之相反。</p>\n<h3>调试体验</h3>\n<p>像<code class=\"language-text\">useBailout()</code>这类的Hook在调试方面的体验如何?\nHow does a Hook like <code class=\"language-text\">useBailout()</code> affect debugging?</p>\n<p>我们可以使用相同的例子:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ChatLayout width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>FriendStatus isOnline<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ChatLayout<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就比如说<code class=\"language-text\">Typing...</code>这个文本，假如不管我们的上级属性如何的变动，显示的都不是我们所期望的。我们应该如何调试它?</p>\n<p><strong>正常情况下，在React中通过从文本所在的组件向上寻找就能自信的回答这个问题</strong>。我们可以打开渲染这个组件的地方<code class=\"language-text\">&lt;ChatThread isTyping={myVar} /&gt;</code>并检查<code class=\"language-text\">myVar</code>等等，只要逐层寻找，你或许会发现有的地方的<code class=\"language-text\">shouldComponentUpdate()</code>有问题，或者<code class=\"language-text\">isTyping</code>的值向下传递的时候有问题。顺藤魔怪的就能够定位到这个问题的所在。</p>\n<p>但是，假如我们加入了<code class=\"language-text\">useBailout()</code>Hook，除非你检查<em>所有的<code class=\"language-text\">ChatThread</code>和其调用链路上组件所使用的自定义Hook</em>，不然你可能还是不能确定为什么没有执行更新。因为组件的父组件也可能使用自定义Hook，这让<a href=\"https://overreacted.io/the-bug-o-notation/\">调试复杂度</a>疯狂增长。</p>\n<p>就好像你在一个抽屉里面找螺丝刀，但是每个抽屉里面都有个更小的抽屉，所以你根本不知道这个兔子洞到底有多深。</p>\n<p><strong>判决书:</strong> 🔴 <code class=\"language-text\">useBailout()</code>这类Hook不仅仅破坏了可组合性原则，这种方案还大大的增加了调试的复杂度 - 在某种情况下，甚至是成本增长的。</p>\n<hr>\n<p><code class=\"language-text\">useState()</code>是我们已经发布的Hook，而<code class=\"language-text\">useBailout()</code>是大家普遍建议但我们故意没有将这个做成一个Hook。我通过可组合性和调试体验这两个原则比较了他们，并讨论了为什么他们其中的一个是可以工作的，而另一个是不能够工作的。</p>\n<p>所以我们没有提供<code class=\"language-text\">memo()</code>或者<code class=\"language-text\">shouldComponentUpdate()</code>的\"Hook版本\"，但是React<em>确实</em>提供了一个名为<a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\"><code class=\"language-text\">useMemo()</code></a>的Hook。它提供了差不多的功能，但是使用方式会稍显不同，进而防止开发者坠入上述的陷阱。</p>\n<p><code class=\"language-text\">useBailout()</code>只是我提到的不应该被作为Hook的例子之一。还有很多类似的 - 比如<code class=\"language-text\">useProvider()</code>, <code class=\"language-text\">useCatch()</code>, or <code class=\"language-text\">useSuspense()</code>。</p>\n<p>你现在知道为什么了么。</p>\n<p><em>(悄悄告诉你: 组合性... 调试体验...)</em></p>","frontmatter":{"title":"翻译: 为什么X不做成Hook","date":"26 January, 2019","tag":"translate,overreacted"},"excerpt":"本文出自overreacted，这是Dan Abramov写的博客，我觉得对很有用所以特意做了这个翻译系列，原文链接请查看这里自从第一个拥有React Hooks的React的alpha版本发布之后。不断地会有人提出一些类似于这样的问题: \"为什么 某个API 不做成Hook…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"translate-overreacted-why-isnt-x-a-hook"}}