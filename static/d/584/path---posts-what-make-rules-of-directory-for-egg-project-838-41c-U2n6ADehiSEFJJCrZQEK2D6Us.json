{"data":{"markdownRemark":{"html":"<blockquote>\n<p>在之前的文章<a href=\"/posts/pre-deep-into-egg-core\">深入egg-core前篇</a>中已经讲述了一个道理，node之所以没有成为一个比较流行的服务器语言，是因为node需要一个企业级的框架。而egg或许是一个不错的选择，针对egg-core的内部实现，将会在这篇文章中作出探索。之前有关注过<a href=\"https://mobile.twitter.com/dan_abramov\">Dan Abramov</a>写的<a href=\"https://overreacted.io/\">overreacted</a>，我觉得他的抛出问题并循序渐进的从源码的角度来回答的方式非常好，决定模仿一番。</p>\n</blockquote>\n<p>在Egg项目的实践中，我们发现我们的目录结果是被规范约束的，比如我们需要把controller放到<code class=\"language-text\">app/controller</code>目录下，扩展会放在<code class=\"language-text\">app/extend</code>下等等，那么egg是如何处理这些文件的呢？</p>\n<p>以<code class=\"language-text\">controller</code>为例，比如我们在<code class=\"language-text\">app/controller</code>下新建了一个文件<code class=\"language-text\">post.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'egg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ctx<span class=\"token punctuation\">,</span> service <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> createRule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 校验参数</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>createRule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 组装参数</span>\n    <span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> author <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 调用 Service 进行业务处理</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> service<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置响应内容和响应状态码</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> res<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">201</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> PostController<span class=\"token punctuation\">;</span></code></pre></div>\n<p>而最后我们会在router中这么使用:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// app/router.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">app</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> router<span class=\"token punctuation\">,</span> controller <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'createPost'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/api/posts'</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>神奇的是，我们定义在<code class=\"language-text\">app/controller</code>下创建了一个名为<code class=\"language-text\">post.js</code>文件，输出一个class，这个class含有一个create的函数，那么我们就能够在router中，通过<code class=\"language-text\">app.controller.post.create</code>来访问到这个函数，这个过程背后的故事到底是怎样的？</p>\n<p>事实上，解析这个魔法，整个过程就是读取某个目录下的文件，解析文件目录为调用层级，解析文件内容为实际调用的函数，如果尝试写一下伪代码的话</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> controller <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> dir <span class=\"token operator\">=</span> <span class=\"token comment\">/* PATH TO CONTROLLERS */</span> <span class=\"token constant\">PATH_TO_CONTROLLERS</span> <span class=\"token comment\">// 比如 app/controllers</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">load</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token regex\">/index|helper/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token function\">handleFileName</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 处理一下文件名，规范成正常的key</span>\n    controller<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      controller<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>像这么笨拙的实现一下，可能能够大致达到类似的效果，但是我们在使用egg的时候，egg不仅仅支持Class类型的Controller输出，还支持对象类型的输出:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> createRule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 校验参数</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>createRule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 组装参数</span>\n  <span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> author <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 调用 service 进行业务处理</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 设置响应内容和响应状态码</span>\n  ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> res<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">201</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>所以上述的魔法应该再被变换一下，应该支持一下对象的定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 另外的代码不在赘述</span>\n  <span class=\"token keyword\">const</span> Controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Controller <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建一个实例</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">///</span></code></pre></div>\n<p>而定义Controller可以在更加深的层级，比如在<code class=\"language-text\">controller/sub/post.js</code>，在router中可以使用<code class=\"language-text\">app.controller.sub.post.xx</code>来调用这个文件中的某个函数，这点在上面的实现还不足以满足，但是稍作修改应该就能够做到这点。所以其实在egg的代码里也是需要一个load的函数来读取controller的。在egg中，除了读取controller之外，像service、config、plugin等等都需要类似的load来读取某个目录下的文件，那么我们就来寻找这个loader的存在吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Mixin methods to EggLoader\n * // ES6 Multiple Inheritance\n * https://medium.com/@leocavalcante/es6-multiple-inheritance-73a3c66d2b6b\n */</span>\n<span class=\"token keyword\">const</span> loaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/extend'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/custom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/service'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/controller'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mixin/router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> loader <span class=\"token keyword\">of</span> loaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EggLoader</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> EggLoader<span class=\"token punctuation\">;</span></code></pre></div>\n<p>在egg-core中最后存在这样的代码，首先引入了一系列的loader，然后将loader中的属性patch到EggLoader.prototype中，这些loader就是最后用于读取我们的目录结构中的模块的关键，也可以说，是这些loader的读取方式约束了我们的目录结构。</p>\n<p>查看一下我们熟悉的controller吧:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">loadController</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Load Controller'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    opt <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      caseStyle<span class=\"token punctuation\">:</span> <span class=\"token string\">'lower'</span><span class=\"token punctuation\">,</span>\n      directory<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>baseDir<span class=\"token punctuation\">,</span> <span class=\"token string\">'app/controller'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">initializer</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> opt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">generatorFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          obj <span class=\"token operator\">=</span> <span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          obj<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>pathName <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>pathName<span class=\"token punctuation\">;</span>\n          obj<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fullPath <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">wrapClass</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">wrapObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// support generatorFunction for forward compatbility</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">generatorFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">wrapObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'module.exports'</span><span class=\"token punctuation\">:</span> obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'module.exports'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> controllerBase <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>directory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadToApp</span><span class=\"token punctuation\">(</span>controllerBase<span class=\"token punctuation\">,</span> <span class=\"token string\">'controller'</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[egg:loader] Controller loaded: %s'</span><span class=\"token punctuation\">,</span> controllerBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Load Controller'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个函数主要做的是事情就是调用了<code class=\"language-text\">this.loadToApp(controllerBase, &#39;controller&#39;, opt)</code>，这个函数被是现在<code class=\"language-text\">egg_loader</code>中:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nopt <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  directory<span class=\"token punctuation\">,</span>\n  target<span class=\"token punctuation\">,</span>\n  inject<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> timingKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`Load \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" to Application`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>timingKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">FileLoader</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>timingKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的<code class=\"language-text\">property</code>是<code class=\"language-text\">controller</code>，opt的大致结构是这样的:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  inject<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 应用</span>\n  caseStyle<span class=\"token punctuation\">:</span> <span class=\"token string\">'lower'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">initializer</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 回看</span>\n  directory<span class=\"token punctuation\">:</span> <span class=\"token string\">'app/controller'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 通常情况下</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后这个函数，又会把任务交给 <code class=\"language-text\">FileLoader().load()</code> 来处理, 具体的读取逻辑由于有很多代码所以不会过多讲述，我们可以查看一下核心的代码，比如以下代码用于将路径解析成函数访问层级的，</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">defaultCamelize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filepath<span class=\"token punctuation\">,</span> caseStyle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> properties <span class=\"token operator\">=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">property</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\">/^[a-z][a-z0-9_-]*$/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>property<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is not match 'a-z0-9_-' in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filepath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    property <span class=\"token operator\">=</span> property<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[_-][a-z]/ig</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> property<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>caseStyle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'lower'</span><span class=\"token punctuation\">:</span>\n        first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'upper'</span><span class=\"token punctuation\">:</span>\n        first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'camel'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> first <span class=\"token operator\">+</span> property<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">const properties = filepath.substring(0, filepath.lastIndexOf(&#39;.&#39;)).split(&#39;/&#39;);</code>文件目录的后缀刨除后，根据<code class=\"language-text\">/</code>分成数组，然后对这个数组循环，对不合理的文件名抛出异常，然后将带有<code class=\"language-text\">-</code>或者<code class=\"language-text\">_</code>转换为驼峰，针对传入的<code class=\"language-text\">caseStyle</code>处理首个字母。</p>\n<p>处理的结果会作为一个<code class=\"language-text\">properties</code>的属性，用于后续的处理。关于文件内容的处理，实现逻辑是这样的:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getExports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fullpath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> initializer<span class=\"token punctuation\">,</span> call<span class=\"token punctuation\">,</span> inject <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> pathName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** utils.loadFile()\n    try {\n      const extname = path.extname(filepath);\n      if (extname &amp;&amp; !require.extensions[extname]) {\n        return fs.readFileSync(filepath);\n      }\n      const obj = require(filepath);\n      if (!obj) return obj;\n      if (obj.__esModule) return 'default' in obj ? obj.default : obj;\n      return obj;\n    } catch (err) {\n      err.message = `[egg-core] load file: ${filepath}, error: ${err.message}`;\n      throw err;\n    }\n  **/</span>\n  <span class=\"token keyword\">let</span> exports <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span>fullpath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initializer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    exports <span class=\"token operator\">=</span> <span class=\"token function\">initializer</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> fullpath<span class=\"token punctuation\">,</span> pathName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">generatorFunction</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> exports<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>call <span class=\"token operator\">&amp;&amp;</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    exports <span class=\"token operator\">=</span> <span class=\"token function\">exports</span><span class=\"token punctuation\">(</span>inject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exports <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> exports<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> exports<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">utils.loadFile</code>的逻辑大致是如果是不支持的扩展名，则直接读取文件内容，如果是支持的扩展名，则require文件，require之后会对esModule做兼容处理。对exports会通过initializer函数再做一次预处理，如果输出是一个类或者generator或者异步函数的话，直接返回exports，如果是一个普通的函数的话，先传入inject并执行exports的函数，然后将结果作为exports返回。</p>\n<p>想起来我们看controller的loader的时候，有看到过一个initializer，我们可以看一下:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">generatorFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obj <span class=\"token operator\">=</span> <span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">class</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>pathName <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>pathName<span class=\"token punctuation\">;</span>\n  obj<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fullPath <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wrapClass</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wrapObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// support generatorFunction for forward compatbility</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">generatorFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">wrapObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'module.exports'</span><span class=\"token punctuation\">:</span> obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'module.exports'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></code></pre></div>\n<p>所以我们可以知道，，如果你的文件输出的是函数的话，执行这个函数。如果是一个类，则会递归查询Controller的父类，然后逐个获取prototype，对函数绑定一个上下文。如果是对象，也会逐个获取key，对函数绑定上下文。</p>\n<p>上面我们获取到了exports和properties，接下来看一下是如何整合的:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">item<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> properties <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> item<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>property <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`can't overwrite property '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>properties<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token constant\">FULLPATH</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>fullpath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    obj <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">primitive</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      obj<span class=\"token punctuation\">[</span><span class=\"token constant\">FULLPATH</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>fullpath<span class=\"token punctuation\">;</span>\n      obj<span class=\"token punctuation\">[</span><span class=\"token constant\">EXPORTS</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    obj <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loaded %s'</span><span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>循环的遍历<code class=\"language-text\">properties</code>的<code class=\"language-text\">key</code>，逐个获取<code class=\"language-text\">exports</code>中的<code class=\"language-text\">key</code>的值，并将值赋值到target中，最后target就是讲目录结构转化为数据结构后的结果。</p>\n<p>通过看了这些代码，我们大致知道了egg中loader的读取逻辑，我们知道了为什么我们的目录结构是这样的，以及每个文件的输出应该能够写成什么样。egg抽象了一个loader就是因为egg中像controller这样读取的逻辑有很多，不同的只是在读取的时候<code class=\"language-text\">initializer</code>的处理逻辑有所不同。</p>","frontmatter":{"title":"什么约束了基于Egg的项目的目录规范","date":"19 December, 2018","tag":"node,egg"},"excerpt":"在之前的文章深入egg-core前篇中已经讲述了一个道理，node之所以没有成为一个比较流行的服务器语言，是因为node需要一个企业级的框架。而egg或许是一个不错的选择，针对egg-core的内部实现，将会在这篇文章中作出探索。之前有关注过Dan Abramov…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"what-make-rules-of-directory-for-egg-project"}}