{"data":{"markdownRemark":{"html":"<blockquote>\n<p>在实现WebServer的过程中，错误处理是一个必不可少的过程，提供优雅的兜底处理是所有Web框架需要解决的事情，Egg在<a href=\"https://eggjs.org/zh-cn/core/error-handling.html\">官方文档中</a>提到错误处理，除了自行<code class=\"language-text\">try catch</code>之外还会有统一的错误处理。</p>\n</blockquote>\n<p>在文档中，明确的指出统一的错误处理是依靠一个<code class=\"language-text\">onerror</code>的插件来完成的，这个插件也是egg官方的一个默认开启的插件，官方提到会根据<a href=\"https://restfulapi.net/content-negotiation/\">content-negotiation</a>来判断具体的返回会使用JSON数据或者是一个html页面。我们可以自己启动一个server来验证一下，当我们直接请求的时候，返回的是一个html信息，当我们通过设定<code class=\"language-text\">Accept: application/json</code>的头部来请求的时候，返回的是一个JSON的数据，这也是onerror的处理逻辑。另外如果你的请求是以<code class=\"language-text\">.json</code>结尾的，也会返回一个JSON的数据。在没有认真读文档之前，我总是设置<code class=\"language-text\">Content-Type: application/json</code>来访问，最终得到的一直是一个Html的返回，这让我很疑惑。</p>\n<p>源码中，整个<code class=\"language-text\">onerror</code>中的源码量不多，对于<code class=\"language-text\">app</code>大致做了两件事情：</p>\n<ul>\n<li>定义了<code class=\"language-text\">app.on(error, handler)</code>的处理(输出一些日志)</li>\n<li>使用执行<code class=\"language-text\">onerror(app, errOptions)</code></li>\n</ul>\n<p><code class=\"language-text\">onerror</code>这个函数来自于<a href=\"https://github.com/koajs/onerror\">koa-onerror</a>，这个包差不多也是egg这些人开发的，在<a href=\"https://github.com/koajs/koa/blob/master/lib/application.js\">koa源码中</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> fnMiddleware</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">onerror</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResponse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">respond</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">onFinished</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> onerror<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fnMiddleware</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>handleResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onerror<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">handleRequest(ctx, fnMiddleware)</code>中执行了<code class=\"language-text\">fnMiddleware(ctx).then(handleResponse).catch(onerror)</code>，这里的onerror取自<code class=\"language-text\">ctx.onerror</code></p>\n<p>原生的koa也处理了这个错误，大致的错误处理方式就是把错误信息返回了。</p>\n<p>onerror中重写了这个错误处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ....other code</span>\n  <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>accepts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    type <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    type <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  type <span class=\"token operator\">=</span> type <span class=\"token operator\">||</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>redirect <span class=\"token operator\">&amp;&amp;</span> type <span class=\"token operator\">!==</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>redirect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      options<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>会先判断请求返回应该要返回什么类型，执行的<code class=\"language-text\">accepts</code>接受一系列返回枚举的字符串，返回应该返回的类型。这个accpets的参数可从外部传入，但默认会使用内部定义的accepts函数:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">accepts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>acceptJSON<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>acceptJSONP<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的<code class=\"language-text\">ctx.acceptJSON</code>和<code class=\"language-text\">ctx.accepJSONP</code>在egg的代码中有申明，具体的处理逻辑有兴趣的可以挖掘一下，找到头的话，链还是很长的。但是大致是遵循content-negotiation的设定的。</p>\n<p>如果定义了<code class=\"language-text\">all</code>的处理的话，content-negotiation的设定，统一通过all来处理，但是需要注意的是只有返回type为json的情况才会在最后执行<code class=\"language-text\">this.body = JSON.stringify(this.body);</code>，所以all中的返回需要自行处理成字符串或者流。</p>\n<p>其余的情况都会从传入的options中获取返回type对应的函数，除了json情况下能够返回对象外，其他的都应该返回字符串或者流。</p>\n<p>egg的错误处理文档感觉是建立在对<code class=\"language-text\">koa-onerror</code>理解的角度上的，不然就只能浅用，所以使用egg最好还是了解好koa以及其各种配套设施。</p>","frontmatter":{"title":"Egg中的错误处理","date":"09 January, 2019","tag":"node,egg"},"excerpt":"在实现WebServer的过程中，错误处理是一个必不可少的过程，提供优雅的兜底处理是所有Web框架需要解决的事情，Egg在 官方文档中 提到错误处理，除了自行 之外还会有统一的错误处理。 在文档中，明确的指出统一的错误处理是依靠一个 的插件来完成的，这个插件也是egg…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"error-handler-in-egg"}}