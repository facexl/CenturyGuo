webpackJsonp([28556145262928],{398:function(e,t){e.exports={data:{markdownRemark:{html:'<blockquote>\n<p>本文出自<a href="https://overreacted.io/">overreacted</a>，这是<a href="https://mobile.twitter.com/dan_abramov">Dan Abramov</a>写的博客，我觉得对很有用所以特意做了这个翻译<a href="/posts/overreacted">系列</a>，原文链接请查看<a href="https://overreacted.io/optimized-for-change/">这里</a></p>\n</blockquote>\n<p>什么造就了一个好的API？</p>\n<p>一个<em>好的</em>API设计应该是好记且不含糊的。它应该有良好的可读性，高准确的和高性能的代码，让开发者<a href="https://blog.codinghorror.com/falling-into-the-pit-of-success/">坠入成功的深渊</a>。</p>\n<p>我把这些设计理念叫做"第一优先级"，因为这些往往是一个库的开发者第一个需要注意的事情。针对这些原则，你可能会作出一些妥协和权衡，但是这些必须是要在你的脑子里考虑的。</p>\n<p>除非你写的代码是给火星人用的，随着时间推移，你的代码总是会需要修改。那些使用你的API的开发者也是。</p>\n<p>我所知道的最好的开发者们对"第一优先级"会有一种责任感。他们也会付出相同的精力在"第二优先级"的API设计原则: <strong>使用这些API的代码之后会如何发展</strong></p>\n<p>一个轻微的改动有的时候会让你一个本来优雅的代码碎裂。</p>\n<p><em>最好的</em> 那些API会预测这些。他们会预测到你可能会移动你的代码，或者将你的代码复制到其他地方，或者重命名它，或者将一些统一的逻辑抽离到一个可以重用的工具中，或者讲一个统一的逻辑重新写会一个特殊的逻辑，或者添加一些hack，或者优化一个瓶颈，或者扔掉一些并开始一个新的代码，或者会写一些错误的代码，或者修复一个bug，或者查看一个修复的bug。</p>\n<p><em>最好的</em> 哪些API不只是让你坠入成功的深渊，他还会让你一直都在成功的深渊里。</p>\n<p>他们会能够预知未来的改变。</p>',frontmatter:{title:"翻译：优秀的API应该能够预知未来的改变",date:"12 December, 2018",tag:"translate,overreacted"}}},pathContext:{slug:"translate-overreacted-optimized-for-change"}}}});
//# sourceMappingURL=path---posts-translate-overreacted-optimized-for-change-d7548e279d1bf30e70ea.js.map