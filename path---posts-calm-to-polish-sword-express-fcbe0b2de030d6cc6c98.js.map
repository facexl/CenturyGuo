{"version":3,"sources":["webpack:///path---posts-calm-to-polish-sword-express-fcbe0b2de030d6cc6c98.js","webpack:///./.cache/json/posts-calm-to-polish-sword-express.json"],"names":["webpackJsonp","375","module","exports","data","markdownRemark","html","frontmatter","title","date","tag","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAs3yCC,aAA8fC,MAAA,mBAAAC,KAAA,qBAAAC,IAAA,mBAA+EC,aAAgBC,KAAA","file":"path---posts-calm-to-polish-sword-express-fcbe0b2de030d6cc6c98.js","sourcesContent":["webpackJsonp([107370358937462],{\n\n/***/ 375:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>不知从什么时候开始，node就开始风靡起来，我们甚至都没有谨慎的研究过他和其他服务器的区别，便开始跃跃欲试。相信很多人会和笔者一样，在接触node服务器的第一时刻，便接触到了express，我有个朋友也说过，学一个东西还是要结合框架来学比较好，当时我便听了话，开始了express+node的学习，当然，express非常顺手，给了我很好的体验。而今天，我们撇开浮躁，静下心来，仔细研究Express框架。</p>\\n</blockquote>\\n<h3>假如没有Express</h3>\\n<p>说到底Express只是一个框架而已，那么，他是一个什么框架呢，我们撇开Express不谈，我们想要完成一个Node的服务，只要如下的代码就可以完成:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"http\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">,</span> response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"Content-Type\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"text/html\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello World!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">80</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>很简单的几行代码就实现了一个服务器，假如我们的需求只是简单的渲染一个页面的话，我们大可以用这几行代码完成我们想做的事情，其实http这系列的库做了很多事情，非常建议大家回头去看看这一系列Express底层的Api。当然了最后我们还是会用框架的，自己整理的也好，用现在流行的Expres或者Koa也好，目的是为了应对复杂的使用场景，减少重复繁琐的代码。</p>\\n<h3>小小的实现一下</h3>\\n<p>说起Express的特点，大概就是中间件吧，所有的东西都是通过中间件来完成的，那么中间件实现是怎么样的呢，假如我们自己实现一个Express，我们就应该先解决中间件的问题，那让我们来尝试一下实现一个简单的Express。</p>\\n<p>首先我们抽离<code class=\\\"language-text\\\">createServer</code>的参数</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">app</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//TODO someting</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span>app<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span>port<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>这样我们逻辑处理就放到了app里面，有的时候一次运行可能产生多个app的实例，为了分隔环境，我们可以用一个工厂方法或者构造行数生成app</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">express</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//TODO someting</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span>app<span class=\\\"token punctuation\\\">)</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span>port<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>接下来我们先实现<code class=\\\"language-text\\\">app.use</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function-variable function\\\">Middleware</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Middleware</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Middleware</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>path <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">use</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>fns<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fns <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">;</span>\\n    path <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> index <span class=\\\"token keyword\\\">in</span> fns<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> fns<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">const</span> middleware <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Middleware</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>middlewares<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>middleware<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>我们定义了一个Middleware的对象，其中有个很多框架中常用的hack，也就是在一个class里面判断是否是使用new来创建对象的，因为使用new来创建对象的时候this一定是当前类的实例，所以我们可以根据this的类型来重定向一个<code class=\\\"language-text\\\">new Function</code>。Middleware用于封装一个中间件层,用于绑定中间件和对应的path。在<code class=\\\"language-text\\\">app.use</code>里面我们将中间件都保存在<code class=\\\"language-text\\\">app</code>的<code class=\\\"language-text\\\">middlewares</code>属性中，那么接下来，我们就要实现这个中间件的处理过程。</p>\\n<p>首先我们要增加一个handler的function</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mathMiddleware</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> middleware<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// TODO match middleware</span>\\n<span class=\\\"token punctuation\\\">}</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">handler</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> url <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> middlewares <span class=\\\"token operator\\\">=</span> app<span class=\\\"token punctuation\\\">.</span>middlewares<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> idx <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> match <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> middleware<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//完成这次请求, 比如有error的情况</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">next</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>match <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">&amp;&amp;</span> idx <span class=\\\"token operator\\\">&lt;</span> middlewares<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      middleware <span class=\\\"token operator\\\">=</span> middlewares<span class=\\\"token punctuation\\\">[</span>idx<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      match <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mathMiddleware</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> middleware<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>在Middleware中加上一个<code class=\\\"language-text\\\">handle</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Middleware<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">handle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这只是简单的实现了一下Express的中间件的逻辑，这也大致是Express的实现逻辑，我们知道了这种中间件的实现方式，那么今后在我们的应用中，对某一块逻辑要使用策略模式、装饰着模式或者工厂模式的时候，我们也可以用一个这样的中间件的策略去切割代码，让逻辑的处理变的非常简单而清晰。</p>\\n<h3>别YY了，看一下官方实现</h3>\\n<p>官方的代码其实写的非常易懂，总的来说，给我的感觉，express就是一个微型的框架。</p>\\n<h5>结构</h5>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">├── application.js\\n├── express.js\\n├── middleware\\n│   ├── init.js\\n│   └── query.js\\n├── request.js\\n├── response.js\\n├── router\\n│   ├── index.js\\n│   ├── layer.js\\n│   └── route.js\\n├── utils.js\\n└── view.js</code></pre>\\n      </div>\\n<h6>express.js</h6>\\n<p>这是整个应用的入口，主要的工作的整合了<code class=\\\"language-text\\\">application.js</code>中的关于app的属性，构造了一个函数来输出app，将一些辅助函数输出，比如<code class=\\\"language-text\\\">Router</code>、<code class=\\\"language-text\\\">Request</code>等等</p>\\n<h6>router</h6>\\n<p>这个类我们应该不陌生，我们在使用express的时候经常使用</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> router <span class=\\\"token operator\\\">=</span> express<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这个router其实是整个app的核心，包括app.use的中间件实现也是通过Router实现的，以下是源码加上注释</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">proto<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">use</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> offset <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//用于计算参数的个数来获取所有的中间件</span>\\n  <span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//设置默认的path为 /</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> fn <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// use('/', fn)的情况</span>\\n    <span class=\\\"token keyword\\\">var</span> arg <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> arg<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      arg <span class=\\\"token operator\\\">=</span> arg<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> arg <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      offset <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n      path <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">//通过offset获取所有的中间件</span>\\n  <span class=\\\"token keyword\\\">var</span> callbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">,</span> offset<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">//当中间件的个数为零的时候，抛出异常</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Router.use() requires a middleware function'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> callbacks<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> callbacks<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> fn <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Router.use() requires a middleware function but got a '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">gettype</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">debug</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'use %o %s'</span><span class=\\\"token punctuation\\\">,</span> path<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'&lt;anonymous>'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">// 创建一个Layer，类似于之前自己实现的Middleware</span>\\n    <span class=\\\"token keyword\\\">var</span> layer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Layer</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n      sensitive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>caseSensitive<span class=\\\"token punctuation\\\">,</span>\\n      strict<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n      end<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    layer<span class=\\\"token punctuation\\\">.</span>route <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>stack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>layer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//将这个layer加入到栈中</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//返回自己用于链式调用</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>之后会讲到这个Layer类，这是一个中间件的承载物，所有的中间件的处理方法和路径的绑定信息都被封装在这个类的实例中，而Router的use方法即使将这些中间件打包成为一个Layer，然后存储到自己的stack中用于之后使用。\\n然后是一个Router中的request处理类，用于使用中间件处理请求。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">proto<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">handle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> out<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//用self指向老的this</span>\\n  <span class=\\\"token keyword\\\">var</span> idx <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 迭代stack的迭代器</span>\\n  <span class=\\\"token keyword\\\">var</span> protohost <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getProtohost</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token comment\\\">//获取协议名</span>\\n  <span class=\\\"token keyword\\\">var</span> removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定义删除字段</span>\\n  <span class=\\\"token keyword\\\">var</span> slashAdded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> paramcalled <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> options <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> stack <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>stack<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// layer 的集合</span>\\n  <span class=\\\"token keyword\\\">var</span> parentParams <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> parentUrl <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>baseUrl <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> done <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">restore</span><span class=\\\"token punctuation\\\">(</span>out<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'baseUrl'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'next'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'params'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  req<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> next<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>method <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'OPTIONS'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 处理Options的请求，跨域问题</span>\\n    done <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">wrap</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>old<span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token operator\\\">||</span> options<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">old</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">sendOptionsResponse</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> old<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  req<span class=\\\"token punctuation\\\">.</span>baseUrl <span class=\\\"token operator\\\">=</span> parentUrl<span class=\\\"token punctuation\\\">;</span>\\n  req<span class=\\\"token punctuation\\\">.</span>originalUrl <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>originalUrl <span class=\\\"token operator\\\">||</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 中间件的迭代方法</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> layerError <span class=\\\"token operator\\\">=</span> err <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'route'</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">:</span> err<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">//计算req.url, req.baseUrl</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>slashAdded<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>url <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      slashAdded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>removed<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>baseUrl <span class=\\\"token operator\\\">=</span> parentUrl<span class=\\\"token punctuation\\\">;</span>\\n      req<span class=\\\"token punctuation\\\">.</span>url <span class=\\\"token operator\\\">=</span> protohost <span class=\\\"token operator\\\">+</span> removed <span class=\\\"token operator\\\">+</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substr</span><span class=\\\"token punctuation\\\">(</span>protohost<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//处理特殊情况，结束这次访问</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>layerError <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'router'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//处理特殊情况，结束这次访问, 没有匹配的路由了</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>idx <span class=\\\"token operator\\\">>=</span> stack<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">,</span> layerError<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getPathname</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//获取当前path</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>path <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span>layerError<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> layer<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> match<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> route<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>match <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token operator\\\">&amp;&amp;</span> idx <span class=\\\"token operator\\\">&lt;</span> stack<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// TODO: 循环获取匹配的Layer</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 没有匹配的</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>match <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span>layerError<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//TODO: 根据layer注入req.params</span>\\n    <span class=\\\"token comment\\\">//TODO: 根据需要调用layer.handle_request或者layer.handle_error</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>当然了我省略了一部分代码，给大家大致的介绍了一下router是如何处理中间件的，处理中间件的关键就这么两个函数，一个是<code class=\\\"language-text\\\">use</code>，一个是<code class=\\\"language-text\\\">handle</code>，<code class=\\\"language-text\\\">handle</code>用于以中间件的形式迭代处理请求，<code class=\\\"language-text\\\">use</code>用于注册中间件</p>\\n<h6>application.js</h6>\\n<p>这是一个app的类，定义了app的属性和函数，那么application又和router有什么联系呢，我们从api中可以发现，几乎router有的函数，在app中都可以使用，比如router.use和app.use，router.get和app.get，那么官方的实现中，是怎么实现的呢，是否是简单的继承呢。我们带着疑问去观察这个类，我们会发现application中有个router的属性，在中间件的表现上，application只是一个傀儡，大部分的实现都还是依靠router的，application的中间件的操作都是交由其router来处理的，也就是说app.use()是约等于app.router.use()的。比如：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">param</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">param</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lazyrouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> name<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">param</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">param</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>话虽这么说，但是app的router是懒加载的，当调用use之类的函数的时候会判断当前是否已经创建了router，否则会创建一个router。除此之外，还会对参数做一些校验和转换，因此还是推荐不直接使用app.router的方式的。</p>\\n<h6>middleware</h6>\\n<p>(有点无聊)这个middleware目录下只是express内置的两个中间件，一个query是用于在req.query注入url中的query参数的，init是一个初始化的中间件，它把req、res相互引用了一些，并mixin了一些req, res的属性，还有x-powered-by额？默认给express打个广告?</p>\\n<h6>Layer</h6>\\n<p>(有那么点意思)这是一个藏在Router下的对象，用于包装中间件和对应的path。</p>\\n<h6>request&#x26;response</h6>\\n<p>(比较无聊)这两个类里面主要是一些api这个和express的核心部分的关系没有那么大，他的主要工作主要集中在封装了一些工具方法，一个方便开发者使用的req, res的属性集合的对象。</p>\\n<h3>看源码有什么用?</h3>\\n<p>总的来说，这次的Express源码之旅是很有帮助的，这是我开始这个源码计划的第一个项目，选择Express的原因是这个框架的代码确实看起来比较简单，不需要编译，其次Express还是我现在用的最多的node服务框架，当然之后会考虑使用koa，所以之后很有可能会带来koa的源码解读。作为一个node服务的框架，这次源码阅读让我更加了解Node的http这个模块的东西，有很多的基础的模块在<a href=\\\"https://github.com/jshttp\\\">jshttp</a>中，阅读它们会让我更加理解一些关于http的问题，查看了整个中间件的实现，让我对这种模式豁然开朗，之后希望能够在项目中灵活的运用。对request和response的阅读让我知道了很多之前看文档没有仔细观察到的api。</p>\",\"frontmatter\":{\"title\":\"静心打磨手中利刃之Express\",\"date\":\"06 September, 2017\",\"tag\":\"静心打磨手中利刃,node\"}}},\"pathContext\":{\"slug\":\"calm-to-polish-sword-express\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-calm-to-polish-sword-express-fcbe0b2de030d6cc6c98.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>不知从什么时候开始，node就开始风靡起来，我们甚至都没有谨慎的研究过他和其他服务器的区别，便开始跃跃欲试。相信很多人会和笔者一样，在接触node服务器的第一时刻，便接触到了express，我有个朋友也说过，学一个东西还是要结合框架来学比较好，当时我便听了话，开始了express+node的学习，当然，express非常顺手，给了我很好的体验。而今天，我们撇开浮躁，静下心来，仔细研究Express框架。</p>\\n</blockquote>\\n<h3>假如没有Express</h3>\\n<p>说到底Express只是一个框架而已，那么，他是一个什么框架呢，我们撇开Express不谈，我们想要完成一个Node的服务，只要如下的代码就可以完成:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"http\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">,</span> response<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">\\\"Content-Type\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"text/html\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello World!\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  response<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">80</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>很简单的几行代码就实现了一个服务器，假如我们的需求只是简单的渲染一个页面的话，我们大可以用这几行代码完成我们想做的事情，其实http这系列的库做了很多事情，非常建议大家回头去看看这一系列Express底层的Api。当然了最后我们还是会用框架的，自己整理的也好，用现在流行的Expres或者Koa也好，目的是为了应对复杂的使用场景，减少重复繁琐的代码。</p>\\n<h3>小小的实现一下</h3>\\n<p>说起Express的特点，大概就是中间件吧，所有的东西都是通过中间件来完成的，那么中间件实现是怎么样的呢，假如我们自己实现一个Express，我们就应该先解决中间件的问题，那让我们来尝试一下实现一个简单的Express。</p>\\n<p>首先我们抽离<code class=\\\"language-text\\\">createServer</code>的参数</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">app</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//TODO someting</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span>app<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span>port<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>这样我们逻辑处理就放到了app里面，有的时候一次运行可能产生多个app的实例，为了分隔环境，我们可以用一个工厂方法或者构造行数生成app</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">express</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//TODO someting</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span>app<span class=\\\"token punctuation\\\">)</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span>port<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>接下来我们先实现<code class=\\\"language-text\\\">app.use</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function-variable function\\\">Middleware</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Middleware</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Middleware</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>path <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">use</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>fns<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fns <span class=\\\"token operator\\\">=</span> path<span class=\\\"token punctuation\\\">;</span>\\n    path <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> index <span class=\\\"token keyword\\\">in</span> fns<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> fns<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">const</span> middleware <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Middleware</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>middlewares<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>middleware<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>我们定义了一个Middleware的对象，其中有个很多框架中常用的hack，也就是在一个class里面判断是否是使用new来创建对象的，因为使用new来创建对象的时候this一定是当前类的实例，所以我们可以根据this的类型来重定向一个<code class=\\\"language-text\\\">new Function</code>。Middleware用于封装一个中间件层,用于绑定中间件和对应的path。在<code class=\\\"language-text\\\">app.use</code>里面我们将中间件都保存在<code class=\\\"language-text\\\">app</code>的<code class=\\\"language-text\\\">middlewares</code>属性中，那么接下来，我们就要实现这个中间件的处理过程。</p>\\n<p>首先我们要增加一个handler的function</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">mathMiddleware</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> middleware<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// TODO match middleware</span>\\n<span class=\\\"token punctuation\\\">}</span>\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">handler</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> url <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> middlewares <span class=\\\"token operator\\\">=</span> app<span class=\\\"token punctuation\\\">.</span>middlewares<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> idx <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> match <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> middleware<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//完成这次请求, 比如有error的情况</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">next</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>match <span class=\\\"token operator\\\">===</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token operator\\\">&amp;&amp;</span> idx <span class=\\\"token operator\\\">&lt;</span> middlewares<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      middleware <span class=\\\"token operator\\\">=</span> middlewares<span class=\\\"token punctuation\\\">[</span>idx<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      match <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">mathMiddleware</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> middleware<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    middleware<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>在Middleware中加上一个<code class=\\\"language-text\\\">handle</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Middleware<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">handle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这只是简单的实现了一下Express的中间件的逻辑，这也大致是Express的实现逻辑，我们知道了这种中间件的实现方式，那么今后在我们的应用中，对某一块逻辑要使用策略模式、装饰着模式或者工厂模式的时候，我们也可以用一个这样的中间件的策略去切割代码，让逻辑的处理变的非常简单而清晰。</p>\\n<h3>别YY了，看一下官方实现</h3>\\n<p>官方的代码其实写的非常易懂，总的来说，给我的感觉，express就是一个微型的框架。</p>\\n<h5>结构</h5>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">├── application.js\\n├── express.js\\n├── middleware\\n│   ├── init.js\\n│   └── query.js\\n├── request.js\\n├── response.js\\n├── router\\n│   ├── index.js\\n│   ├── layer.js\\n│   └── route.js\\n├── utils.js\\n└── view.js</code></pre>\\n      </div>\\n<h6>express.js</h6>\\n<p>这是整个应用的入口，主要的工作的整合了<code class=\\\"language-text\\\">application.js</code>中的关于app的属性，构造了一个函数来输出app，将一些辅助函数输出，比如<code class=\\\"language-text\\\">Router</code>、<code class=\\\"language-text\\\">Request</code>等等</p>\\n<h6>router</h6>\\n<p>这个类我们应该不陌生，我们在使用express的时候经常使用</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> router <span class=\\\"token operator\\\">=</span> express<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Router</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这个router其实是整个app的核心，包括app.use的中间件实现也是通过Router实现的，以下是源码加上注释</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">proto<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">use</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> offset <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//用于计算参数的个数来获取所有的中间件</span>\\n  <span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//设置默认的path为 /</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> fn <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// use('/', fn)的情况</span>\\n    <span class=\\\"token keyword\\\">var</span> arg <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> arg<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      arg <span class=\\\"token operator\\\">=</span> arg<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> arg <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      offset <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n      path <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">//通过offset获取所有的中间件</span>\\n  <span class=\\\"token keyword\\\">var</span> callbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">flatten</span><span class=\\\"token punctuation\\\">(</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">,</span> offset<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">//当中间件的个数为零的时候，抛出异常</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>callbacks<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Router.use() requires a middleware function'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> callbacks<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> callbacks<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> fn <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Router.use() requires a middleware function but got a '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">gettype</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">debug</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'use %o %s'</span><span class=\\\"token punctuation\\\">,</span> path<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'&lt;anonymous>'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">// 创建一个Layer，类似于之前自己实现的Middleware</span>\\n    <span class=\\\"token keyword\\\">var</span> layer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Layer</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n      sensitive<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>caseSensitive<span class=\\\"token punctuation\\\">,</span>\\n      strict<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n      end<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    layer<span class=\\\"token punctuation\\\">.</span>route <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>stack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>layer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//将这个layer加入到栈中</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//返回自己用于链式调用</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>之后会讲到这个Layer类，这是一个中间件的承载物，所有的中间件的处理方法和路径的绑定信息都被封装在这个类的实例中，而Router的use方法即使将这些中间件打包成为一个Layer，然后存储到自己的stack中用于之后使用。\\n然后是一个Router中的request处理类，用于使用中间件处理请求。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">proto<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">handle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> out<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//用self指向老的this</span>\\n  <span class=\\\"token keyword\\\">var</span> idx <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 迭代stack的迭代器</span>\\n  <span class=\\\"token keyword\\\">var</span> protohost <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getProtohost</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token comment\\\">//获取协议名</span>\\n  <span class=\\\"token keyword\\\">var</span> removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定义删除字段</span>\\n  <span class=\\\"token keyword\\\">var</span> slashAdded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> paramcalled <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> options <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> stack <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>stack<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// layer 的集合</span>\\n  <span class=\\\"token keyword\\\">var</span> parentParams <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>params<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> parentUrl <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>baseUrl <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> done <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">restore</span><span class=\\\"token punctuation\\\">(</span>out<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'baseUrl'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'next'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'params'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  req<span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> next<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>method <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'OPTIONS'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 处理Options的请求，跨域问题</span>\\n    done <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">wrap</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>old<span class=\\\"token punctuation\\\">,</span> err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token operator\\\">||</span> options<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">old</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">sendOptionsResponse</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> old<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  req<span class=\\\"token punctuation\\\">.</span>baseUrl <span class=\\\"token operator\\\">=</span> parentUrl<span class=\\\"token punctuation\\\">;</span>\\n  req<span class=\\\"token punctuation\\\">.</span>originalUrl <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>originalUrl <span class=\\\"token operator\\\">||</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 中间件的迭代方法</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> layerError <span class=\\\"token operator\\\">=</span> err <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'route'</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">:</span> err<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">//计算req.url, req.baseUrl</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>slashAdded<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>url <span class=\\\"token operator\\\">=</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      slashAdded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>removed<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      req<span class=\\\"token punctuation\\\">.</span>baseUrl <span class=\\\"token operator\\\">=</span> parentUrl<span class=\\\"token punctuation\\\">;</span>\\n      req<span class=\\\"token punctuation\\\">.</span>url <span class=\\\"token operator\\\">=</span> protohost <span class=\\\"token operator\\\">+</span> removed <span class=\\\"token operator\\\">+</span> req<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substr</span><span class=\\\"token punctuation\\\">(</span>protohost<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      removed <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//处理特殊情况，结束这次访问</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>layerError <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'router'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">return</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//处理特殊情况，结束这次访问, 没有匹配的路由了</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>idx <span class=\\\"token operator\\\">>=</span> stack<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setImmediate</span><span class=\\\"token punctuation\\\">(</span>done<span class=\\\"token punctuation\\\">,</span> layerError<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getPathname</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//获取当前path</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>path <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span>layerError<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">var</span> layer<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> match<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> route<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>match <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token operator\\\">&amp;&amp;</span> idx <span class=\\\"token operator\\\">&lt;</span> stack<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// TODO: 循环获取匹配的Layer</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 没有匹配的</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>match <span class=\\\"token operator\\\">!==</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">done</span><span class=\\\"token punctuation\\\">(</span>layerError<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">//TODO: 根据layer注入req.params</span>\\n    <span class=\\\"token comment\\\">//TODO: 根据需要调用layer.handle_request或者layer.handle_error</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>当然了我省略了一部分代码，给大家大致的介绍了一下router是如何处理中间件的，处理中间件的关键就这么两个函数，一个是<code class=\\\"language-text\\\">use</code>，一个是<code class=\\\"language-text\\\">handle</code>，<code class=\\\"language-text\\\">handle</code>用于以中间件的形式迭代处理请求，<code class=\\\"language-text\\\">use</code>用于注册中间件</p>\\n<h6>application.js</h6>\\n<p>这是一个app的类，定义了app的属性和函数，那么application又和router有什么联系呢，我们从api中可以发现，几乎router有的函数，在app中都可以使用，比如router.use和app.use，router.get和app.get，那么官方的实现中，是怎么实现的呢，是否是简单的继承呢。我们带着疑问去观察这个类，我们会发现application中有个router的属性，在中间件的表现上，application只是一个傀儡，大部分的实现都还是依靠router的，application的中间件的操作都是交由其router来处理的，也就是说app.use()是约等于app.router.use()的。比如：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">app<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">param</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">param</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lazyrouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> name<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">param</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_router<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">param</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>话虽这么说，但是app的router是懒加载的，当调用use之类的函数的时候会判断当前是否已经创建了router，否则会创建一个router。除此之外，还会对参数做一些校验和转换，因此还是推荐不直接使用app.router的方式的。</p>\\n<h6>middleware</h6>\\n<p>(有点无聊)这个middleware目录下只是express内置的两个中间件，一个query是用于在req.query注入url中的query参数的，init是一个初始化的中间件，它把req、res相互引用了一些，并mixin了一些req, res的属性，还有x-powered-by额？默认给express打个广告?</p>\\n<h6>Layer</h6>\\n<p>(有那么点意思)这是一个藏在Router下的对象，用于包装中间件和对应的path。</p>\\n<h6>request&#x26;response</h6>\\n<p>(比较无聊)这两个类里面主要是一些api这个和express的核心部分的关系没有那么大，他的主要工作主要集中在封装了一些工具方法，一个方便开发者使用的req, res的属性集合的对象。</p>\\n<h3>看源码有什么用?</h3>\\n<p>总的来说，这次的Express源码之旅是很有帮助的，这是我开始这个源码计划的第一个项目，选择Express的原因是这个框架的代码确实看起来比较简单，不需要编译，其次Express还是我现在用的最多的node服务框架，当然之后会考虑使用koa，所以之后很有可能会带来koa的源码解读。作为一个node服务的框架，这次源码阅读让我更加了解Node的http这个模块的东西，有很多的基础的模块在<a href=\\\"https://github.com/jshttp\\\">jshttp</a>中，阅读它们会让我更加理解一些关于http的问题，查看了整个中间件的实现，让我对这种模式豁然开朗，之后希望能够在项目中灵活的运用。对request和response的阅读让我知道了很多之前看文档没有仔细观察到的api。</p>\",\"frontmatter\":{\"title\":\"静心打磨手中利刃之Express\",\"date\":\"06 September, 2017\",\"tag\":\"静心打磨手中利刃,node\"}}},\"pathContext\":{\"slug\":\"calm-to-polish-sword-express\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-calm-to-polish-sword-express.json\n// module id = 375\n// module chunks = 107370358937462"],"sourceRoot":""}