{"version":3,"sources":["webpack:///path---posts-read-code-es-promise-polyfill-c056fe667c471ad927aa.js","webpack:///./.cache/json/posts-read-code-es-promise-polyfill.json"],"names":["webpackJsonp","373","module","exports","data","markdownRemark","html","frontmatter","title","date","tag","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAA20qEC,aAAgRC,MAAA,gBAAAC,KAAA,oBAAAC,IAAA,gBAAwEC,aAAgBC,KAAA","file":"path---posts-read-code-es-promise-polyfill-c056fe667c471ad927aa.js","sourcesContent":["webpackJsonp([236054049938401],{\n\n/***/ 373:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>Promise 是一个老生常谈的题目，我们总会在前端的题目里多多少少的看到关于Promise的题目，奇怪的是，或许大部分人在日常编码中用的总会得心应手，可最后遇到这方面的题目的时候，总是会手足无措，主要原因可能还是对Promise的理解还不够深入吧，思来想去觉得可以去看一下Promise的补丁的代码，从源码的角度上理解一下Promise。</p>\\n</blockquote>\\n<h3>开场白</h3>\\n<p>我们可以尝试从几个Promise的问题开始。</p>\\n<ol>\\n<li>如何终止一个Promise</li>\\n<li>如上的代码会输出什么?</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>或许以往的编码经验已经让你得出一个答案了，无论这个答案是否能够是正确的，这并不是最重要的，最重要的是你得出这个答案的原因，如果只是背诵出这个答案或者通过一些介绍的文档让你得到这个答案，都不如因为自己理解这个Promise的工作原理来人让人安心。既然Promise是可以通过类似<a href=\\\"\\\">bluebird</a>或者<a href=\\\"\\\">es-promise-polyfill</a>patch出来的，那么我们不妨来看看Promise的实现吧。</p>\\n<p>我们这次主要是阅读<a href=\\\"https://github.com/stefanpenner/es6-promise\\\">es5-promise</a>的源码，没有选择bluebird是因为我觉得这个会相对简单点。</p>\\n<h3>构造函数</h3>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">PROMISE_ID</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">nextId</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_subscribers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>noop <span class=\\\"token operator\\\">!==</span> resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">typeof</span> resolver <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">needsResolver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Promise</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">initializePromise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">needsNew</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>构造函数中为一个promise的实例初始化了一些属性，需要注意的是一个<code class=\\\"language-text\\\">promise</code>的实例在初始化的时候状态是<code class=\\\"language-text\\\">undefined</code>，我们可以查看一下promise定义的状态</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">PENDING</span>   <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">FULFILLED</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">REJECTED</span>  <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>我们需要记住这个状态的定义，在后续阅读源码的时候会有用。</p>\\n<p>除此之外<code class=\\\"language-text\\\">promise</code>的初始化还创建了一个<code class=\\\"language-text\\\">_subscribers</code>的属性，这个在整个<code class=\\\"language-text\\\">promise</code>的运作过程中很重要，后续会提到。</p>\\n<p>在检查了resolve和该函数是否被当做构造函数使用之后，执行了<code class=\\\"language-text\\\">initializePromise</code>函数来继续初始化<code class=\\\"language-text\\\">promise</code>，之后的大部分逻辑都放在了<code class=\\\"language-text\\\">-internal.js</code>的文件中</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">initializePromise</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">rejectPromise</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里的promise是构造函数生成的promise实例，这里的resolver指的是我们在创建Promise实例时传入的函数，比如</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>上述例子中 resolver指的就是<code class=\\\"language-text\\\">(resolve, reject) =&gt; {}</code>，我们调用的<code class=\\\"language-text\\\">resolve(value)</code>相当于调用了内部定义的<code class=\\\"language-text\\\">resolve(promise, value)</code>，我们调用<code class=\\\"language-text\\\">reject(reason)</code>相当于调用了内部定义的<code class=\\\"language-text\\\">reject(promise, reason)</code>。因此可以看出，当我们创建了一个<code class=\\\"language-text\\\">Promise</code>之后，<code class=\\\"language-text\\\">Promise</code>的<code class=\\\"language-text\\\">resolver</code>会直接开始运行。</p>\\n<p>那么接下来让我们看一下<code class=\\\"language-text\\\">resolve(promise, value)</code>的实现</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">selfFulfillment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">objectOrFunction</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleMaybeThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getThen</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>首先来看第一个判断，这个判断检查了当前的<code class=\\\"language-text\\\">promise</code>是否和<code class=\\\"language-text\\\">resolve</code>的<code class=\\\"language-text\\\">value</code>是相同的，如果相同则执行<code class=\\\"language-text\\\">reject</code>，关于 reject 我们可以稍后再来讲解，但是大致是一个跑出异常的途径，而<code class=\\\"language-text\\\">selfFulfillment</code>则返回一个错误</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">selfFulfillment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"You cannot resolve a promise with itself\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>也就是说，在promise和resolve的value相同的情况下，会返回一个异常，比如</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Promise reject with type error</span></code></pre>\\n      </div>\\n<p>这点和原生的Promise可能会有点出入，原生的<code class=\\\"language-text\\\">Promise</code>在执行上述第一行后会向外抛出一个异常，而且异常描述和<code class=\\\"language-text\\\">es-promise</code>不同，原生异常描述为<code class=\\\"language-text\\\">Chaining cycle detected for promise #&lt;Promise&gt;</code> 但是其实应该是一个意思。</p>\\n<p>接着下一个判断<code class=\\\"language-text\\\">objectOrFunction(value)</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">objectOrFunction</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> type <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> x<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">||</span> type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这是一个简单的判断是否为对象挥着函数的方法能够通过校验的有 <code class=\\\"language-text\\\">函数、纯对象、数组、类</code></p>\\n<p>接着如果是个对象或者函数的话，执行一个<code class=\\\"language-text\\\">handleMaybeThenable</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleMaybeThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">,</span> then<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">===</span> promise<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">&amp;&amp;</span>\\n      then <span class=\\\"token operator\\\">===</span> originalThen <span class=\\\"token operator\\\">&amp;&amp;</span>\\n      maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor<span class=\\\"token punctuation\\\">.</span>resolve <span class=\\\"token operator\\\">===</span> originalResolve<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleOwnThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>then <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>then <span class=\\\"token operator\\\">===</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isFunction</span><span class=\\\"token punctuation\\\">(</span>then<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">handleForeignThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">,</span> then<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里先解释一下入参，<code class=\\\"language-text\\\">promise</code>是当前的promise，<code class=\\\"language-text\\\">maybeThenable</code>是<code class=\\\"language-text\\\">resolve</code>的<code class=\\\"language-text\\\">value</code>且这个value是对象或者函数，<code class=\\\"language-text\\\">then</code>是通过一个<code class=\\\"language-text\\\">getThen(value)</code>的函数来获取的</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getThen</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> promise<span class=\\\"token punctuation\\\">.</span>then<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> error<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个函数尝试获取了promise的then属性、这里的try/catch我不是很看得懂，应该只有一部分开发人员实在作死的情况下才能够抛出异常。</p>\\n<p>那么三个入参已经解释完了，我们首先来看第一个判断</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">===</span> promise<span class=\\\"token punctuation\\\">.</span>constructor\\n<span class=\\\"token operator\\\">&amp;&amp;</span> then <span class=\\\"token operator\\\">===</span> originalThen\\n<span class=\\\"token operator\\\">&amp;&amp;</span> maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor<span class=\\\"token punctuation\\\">.</span>resolve <span class=\\\"token operator\\\">===</span> originalResolve</code></pre>\\n      </div>\\n<p>总的来说，先判断了当前resolve的value是否是一个promise的实例，然后判断value.then是否是一个正常的then(和定义的promise的then函数相同)，通过这个判断就能够确定当前的value就是一个正常的<code class=\\\"language-text\\\">promise</code>实例</p>\\n<p>针对返回的<code class=\\\"language-text\\\">promise</code>会调用函数<code class=\\\"language-text\\\">handleOwnThenable</code>来处理</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleOwnThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> thenable<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thenable<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> thenable<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thenable<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> thenable<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>thenable<span class=\\\"token punctuation\\\">,</span> undefined<span class=\\\"token punctuation\\\">,</span> value  <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                                   reason <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里的promise和thenable分别是当前的promise对象和resolve的value，而thenable其实经过判断也是一个合法的promise，这里校验了resolve的promise的<code class=\\\"language-text\\\">_state</code>。</p>\\n<p>如果thenable是一个已经完成的<code class=\\\"language-text\\\">promise</code>的话，调用<code class=\\\"language-text\\\">fullfill()</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">!==</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n  promise<span class=\\\"token punctuation\\\">.</span>_result <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_subscribers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publish<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>再次介绍一下这里的入参，promise是当前的promise实例，value是resolve的promise在fulfill之后的返回值，首先<code class=\\\"language-text\\\">fullfill</code>本身也会校验<code class=\\\"language-text\\\">promise</code>的状态，然后将当前的promise实例赋值状态和当前的值。后续去判断了一个<code class=\\\"language-text\\\">promise._subscribers</code>的长度，关于这个<code class=\\\"language-text\\\">promise._subscribers</code>应该只是这个<code class=\\\"language-text\\\">es-promise</code>自己实现的需要，原生的<code class=\\\"language-text\\\">promise</code>是没有这个属性的，我们没有去关注原生的promise的实现方式，暂且关系这个<code class=\\\"language-text\\\">es-promise</code>的实现吧，而这个<code class=\\\"language-text\\\">promise._subscribers</code>在后续会讲到，可以先理解为一系列已经注册的观察者。至于这些观察者是什么时候注册，后续会娓娓道来。那么我们现在可能比较关心的就是如何理解<code class=\\\"language-text\\\">asap(publish, promise)</code>这个调用</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">asap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">,</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  queue<span class=\\\"token punctuation\\\">[</span>len<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> callback<span class=\\\"token punctuation\\\">;</span>\\n  queue<span class=\\\"token punctuation\\\">[</span>len <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arg<span class=\\\"token punctuation\\\">;</span>\\n  len <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>len <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// If len is 2, that means that we need to schedule an async flush.</span>\\n    <span class=\\\"token comment\\\">// If additional callbacks are queued before the queue is flushed, they</span>\\n    <span class=\\\"token comment\\\">// will be processed by this flush that we are scheduling.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>customSchedulerFn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">customSchedulerFn</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">scheduleFlush</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">queue</code>是一个全局的变量，每次执行asap都会将回调函数callback和该回调函数所需的参数arg放到队列<code class=\\\"language-text\\\">queue</code>中，而len记录了当前queue的长度，当长度为2，也就是说，本来队列中为空的情况下会去执行<code class=\\\"language-text\\\">scheduleFlush()</code>这里有个判断，会判断<code class=\\\"language-text\\\">customSchedulerFn</code>这个变量，这个变量会在开发人员调用了<code class=\\\"language-text\\\">setScheduler</code>设置成开发人员自定义的<code class=\\\"language-text\\\">scheduleFlush</code>，而系统已经更具浏览器的兼容情况为我们提供了<code class=\\\"language-text\\\">scheduleFlush</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">let</span> scheduleFlush<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Decide what async method to use to triggering processing of queued callbacks:</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isNode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useNextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>BrowserMutationObserver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMutationObserver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isWorker<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMessageChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>browserWindow <span class=\\\"token operator\\\">===</span> undefined <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">typeof</span> require <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">attemptVertx</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useSetTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>我们先看<code class=\\\"language-text\\\">isNode</code>的情况</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useNextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nextTick</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以发现，其实scheduleFlush就是想在下一个事件循环中执行flush的操作。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">flush</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">+=</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> callback <span class=\\\"token operator\\\">=</span> queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> arg <span class=\\\"token operator\\\">=</span> queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  len <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>而flush就是讲队列中的任务逐个执行，这里没有将队列中的数据排出，这就是为什么还需要个len来表示当前队列的实际长度</p>\\n<p>接下来的各种判断就是根据浏览器来决定用什么方式来实现“下个事件循环”中执行</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useMutationObserver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> iterations <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> observer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BrowserMutationObserver</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> node <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createTextNode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  observer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> characterData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    node<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>iterations <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">++</span>iterations <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">useMutationObserver</code>是通过MutationObserver的监听来实现事件循环，关于MutationObserver的浏览器兼容问题，可以查看<a href=\\\"https://caniuse.com/#search=MutationObserver\\\">can i use </a></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// web worker</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useMessageChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> channel <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MessageChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  channel<span class=\\\"token punctuation\\\">.</span>port1<span class=\\\"token punctuation\\\">.</span>onmessage <span class=\\\"token operator\\\">=</span> flush<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> channel<span class=\\\"token punctuation\\\">.</span>port2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">useMessageChannel</code>是通过web worker的<code class=\\\"language-text\\\">MessageChannel</code>来实现事件循环的，关于<code class=\\\"language-text\\\">MessageChannel</code>的浏览器兼容问题，可以查看<a href=\\\"https://caniuse.com/#search=MessageChannel\\\">can i use</a></p>\\n<p>最后，保底会使用setTimeout来实现事件循环</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useSetTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> globalSetTimeout <span class=\\\"token operator\\\">=</span> setTimeout<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">globalSetTimeout</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>当然这并不是很科学的下个事件循环的实现，只是模拟的一个简短的延迟执行。</p>\\n<p>回过头来我们继续看调用这个<code class=\\\"language-text\\\">asap</code>的代码</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publish<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>通过查看刚才对<code class=\\\"language-text\\\">asap</code>这个函数的立即，上述代码可以理解为下个事件循环执行<code class=\\\"language-text\\\">publish(promise)</code>函数，那么再看查看一下<code class=\\\"language-text\\\">publish(promise)</code>这个函数</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> subscribers <span class=\\\"token operator\\\">=</span> promise<span class=\\\"token punctuation\\\">.</span>_subscribers<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> settled <span class=\\\"token operator\\\">=</span> promise<span class=\\\"token punctuation\\\">.</span>_state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>subscribers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> child<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> detail <span class=\\\"token operator\\\">=</span> promise<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> subscribers<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    child <span class=\\\"token operator\\\">=</span> subscribers<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    callback <span class=\\\"token operator\\\">=</span> subscribers<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> settled<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">invokeCallback</span><span class=\\\"token punctuation\\\">(</span>settled<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> detail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span>detail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_subscribers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>publish获取了promise的subscribers，subscribers中的数据是循环的使用<code class=\\\"language-text\\\">[...&lt;promise&gt;, &lt;resolved callback&gt;, &lt;rejected callback&gt;...]</code> 如果 subscribers 中没有观察者，则什么都不做，否则循环。在每个循环中，取到观察者promise，通过当前的promise的状态来获取应该使用resolve还是reject</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">callback <span class=\\\"token operator\\\">=</span> subscribers<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> settled<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>由于<code class=\\\"language-text\\\">es-promise</code>对state的定义为:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">PENDING</span>   <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">FULFILLED</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">REJECTED</span>  <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>所以可以直接通过<code class=\\\"language-text\\\">subscribers[i + settled]</code>来获取到当前的callback, 获取到callback之后会校验观察者的promise是否存在，如果存在就调用<code class=\\\"language-text\\\">invokeCallback</code>，否则就调用<code class=\\\"language-text\\\">callback(detail)</code>，相当于直接调用注册的的resolve或者reject的回调，<code class=\\\"language-text\\\">callback(detail)</code>这个很好理解，那么我们再看看<code class=\\\"language-text\\\">invokeCallback</code>做了什么</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">invokeCallback</span><span class=\\\"token punctuation\\\">(</span>settled<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> detail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> hasCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">isFunction</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      value<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">,</span> succeeded<span class=\\\"token punctuation\\\">,</span> failed<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>hasCallback<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    value <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryCatch</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">,</span> detail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      error <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">;</span>\\n      value<span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      succeeded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">cannotReturnOwn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    value <span class=\\\"token operator\\\">=</span> detail<span class=\\\"token punctuation\\\">;</span>\\n    succeeded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">!==</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// noop</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>hasCallback <span class=\\\"token operator\\\">&amp;&amp;</span> succeeded<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>settled <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>settled <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这又是一个需要回顾入参的函数，settled为当前Promise的状态，promise为当前的观察的promise的实例，callback为当前观察者注册的父promise在resolve或者reject后的回调，detail是当前promise在fullfill后的返回值，首先会校验是否callback是否为一个函数，如果是一个函数，会尝试执行这个函数，那么可能我们就要关心一个这个函数到底是什么东西，也是时候讲述一下这写subscriber是什么时候注册的了，在之前的代码中我们已经看到过一次注册的地方了，在<code class=\\\"language-text\\\">handleOwnThenable</code>中如果当前的promise为pedding的状态的话会执行<code class=\\\"language-text\\\">subscribe(thenable, undefined, value  =&gt; resolve(promise, value), reason =&gt; reject(promise, reason))</code>，可以看一下<code class=\\\"language-text\\\">subscribe</code>的实现</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> onFulfillment<span class=\\\"token punctuation\\\">,</span> onRejection<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> _subscribers <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> parent<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> length <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> _subscribers<span class=\\\"token punctuation\\\">;</span>\\n  parent<span class=\\\"token punctuation\\\">.</span>_onerror <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  _subscribers<span class=\\\"token punctuation\\\">[</span>length<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> child<span class=\\\"token punctuation\\\">;</span>\\n  _subscribers<span class=\\\"token punctuation\\\">[</span>length <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> onFulfillment<span class=\\\"token punctuation\\\">;</span>\\n  _subscribers<span class=\\\"token punctuation\\\">[</span>length <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token operator\\\">=</span> onRejection<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> parent<span class=\\\"token punctuation\\\">.</span>_state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publish<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>subscribe在当前promise的_subscribers中插入观察者信息（promise、resolve、reject），判断当前的<code class=\\\"language-text\\\">promise</code>如果为非pedding状态且之前观察者队列为空的话，可以直接在下个事件循环中，通知所有的观察者当前的promise已经完成，并执行回调。回看<code class=\\\"language-text\\\">invokeCallback</code>的callback应该就是<code class=\\\"language-text\\\">subscribe</code>的<code class=\\\"language-text\\\">onFullfillment</code>或者<code class=\\\"language-text\\\">onRejection</code>，这个参数是在调用<code class=\\\"language-text\\\">subscribe</code>的时候传入的，<code class=\\\"language-text\\\">handleOwnThenable</code>中最后就是调用了<code class=\\\"language-text\\\">resolve(promise, value)</code>和<code class=\\\"language-text\\\">reject(promise, error)</code>来作为<code class=\\\"language-text\\\">onFullfillment</code>和<code class=\\\"language-text\\\">onRejection</code>。当然之前的<code class=\\\"language-text\\\">handleOwnThenable</code>中调用的<code class=\\\"language-text\\\">subscribe</code>显然不会走到<code class=\\\"language-text\\\">invokeCallback</code>的逻辑中，因为那个<code class=\\\"language-text\\\">subscribe</code>的child是空的，最后在publish的时候<code class=\\\"language-text\\\">child</code>为空会直接执行<code class=\\\"language-text\\\">callback(detail)</code>，那么什么时候执行<code class=\\\"language-text\\\">invokeCallback</code>呢，可以查看一下还有什么地方会调用<code class=\\\"language-text\\\">subscribe</code>。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>onFulfillment<span class=\\\"token punctuation\\\">,</span> onRejection<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> parent <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> child <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">this<span class=\\\"token punctuation\\\">.</span>cnstructor</span><span class=\\\"token punctuation\\\">(</span>noop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">PROMISE_ID</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">makePromise</span><span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> _state <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> parent<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> callback <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">[</span>_state <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">invokeCallback</span><span class=\\\"token punctuation\\\">(</span>_state<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> onFulfillment<span class=\\\"token punctuation\\\">,</span> onRejection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> child<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以看到 Promise.prototype.then 是如上实现的，每个promise.then都会创建一个新的<code class=\\\"language-text\\\">promise</code>，并且在then执行结束的时候返回它，如果当前promise的状态还处于pendding会注册一个监听，这个监听在当前promise完成之后会执行传入onFulfillment或者onRejection，不然会直接在下个事件循环中执行onFulfillment和onRejection，这里的subscribe会传入一个child，所以会在最后执行publish的时候执行invokeCallback</p>\\n<p>所以总的来说，invokeCallback执行的一般可能是then的时候onFulfillment或onRejection，或者可能是创建一个Promise的时候resolve一个新的promise的时候</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// example1</span>\\nPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 这里的then会注册一个subscribe然后会触发invokeCallback，callback参数为() => 1</span>\\n<span class=\\\"token comment\\\">// example2</span>\\nPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 因为resolve了一个promise，会subscribe这个resolve的promise，在这个promise结束的时候，改变自身的状态并且尝试publish自己的所有subscribers</span></code></pre>\\n      </div>\\n<p>回到开始的<code class=\\\"language-text\\\">initializePromise</code>，我们解释了一大圈resolve的逻辑，现在再看看reject的逻辑</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">!==</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">;</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_result <span class=\\\"token operator\\\">=</span> reason<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publishRejection<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>其实reject的逻辑很简单，就是讲当前的promise的状态设置rejected并赋值相应的原因，在下个事件循环中调用<code class=\\\"language-text\\\">publishRejection</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">publishRejection</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_onerror<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_onerror</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">publishRejection</code>的实现其实只是在正常的publish之前尝试调用了<code class=\\\"language-text\\\">promise._onerror</code>，我不知道这个是不是原生promise的标准，这个<code class=\\\"language-text\\\">es-promise</code>是存在这个逻辑的。</p>\",\"frontmatter\":{\"title\":\"尝试理解Promise源码\",\"date\":\"22 November, 2018\",\"tag\":\"Promise,ES\"}}},\"pathContext\":{\"slug\":\"read-code-es-promise-polyfill\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-read-code-es-promise-polyfill-c056fe667c471ad927aa.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>Promise 是一个老生常谈的题目，我们总会在前端的题目里多多少少的看到关于Promise的题目，奇怪的是，或许大部分人在日常编码中用的总会得心应手，可最后遇到这方面的题目的时候，总是会手足无措，主要原因可能还是对Promise的理解还不够深入吧，思来想去觉得可以去看一下Promise的补丁的代码，从源码的角度上理解一下Promise。</p>\\n</blockquote>\\n<h3>开场白</h3>\\n<p>我们可以尝试从几个Promise的问题开始。</p>\\n<ol>\\n<li>如何终止一个Promise</li>\\n<li>如上的代码会输出什么?</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>或许以往的编码经验已经让你得出一个答案了，无论这个答案是否能够是正确的，这并不是最重要的，最重要的是你得出这个答案的原因，如果只是背诵出这个答案或者通过一些介绍的文档让你得到这个答案，都不如因为自己理解这个Promise的工作原理来人让人安心。既然Promise是可以通过类似<a href=\\\"\\\">bluebird</a>或者<a href=\\\"\\\">es-promise-polyfill</a>patch出来的，那么我们不妨来看看Promise的实现吧。</p>\\n<p>我们这次主要是阅读<a href=\\\"https://github.com/stefanpenner/es6-promise\\\">es5-promise</a>的源码，没有选择bluebird是因为我觉得这个会相对简单点。</p>\\n<h3>构造函数</h3>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">PROMISE_ID</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">nextId</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_subscribers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>noop <span class=\\\"token operator\\\">!==</span> resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">typeof</span> resolver <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">needsResolver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Promise</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">initializePromise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">needsNew</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>构造函数中为一个promise的实例初始化了一些属性，需要注意的是一个<code class=\\\"language-text\\\">promise</code>的实例在初始化的时候状态是<code class=\\\"language-text\\\">undefined</code>，我们可以查看一下promise定义的状态</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">PENDING</span>   <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">FULFILLED</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">REJECTED</span>  <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>我们需要记住这个状态的定义，在后续阅读源码的时候会有用。</p>\\n<p>除此之外<code class=\\\"language-text\\\">promise</code>的初始化还创建了一个<code class=\\\"language-text\\\">_subscribers</code>的属性，这个在整个<code class=\\\"language-text\\\">promise</code>的运作过程中很重要，后续会提到。</p>\\n<p>在检查了resolve和该函数是否被当做构造函数使用之后，执行了<code class=\\\"language-text\\\">initializePromise</code>函数来继续初始化<code class=\\\"language-text\\\">promise</code>，之后的大部分逻辑都放在了<code class=\\\"language-text\\\">-internal.js</code>的文件中</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">initializePromise</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> resolver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">rejectPromise</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里的promise是构造函数生成的promise实例，这里的resolver指的是我们在创建Promise实例时传入的函数，比如</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>上述例子中 resolver指的就是<code class=\\\"language-text\\\">(resolve, reject) =&gt; {}</code>，我们调用的<code class=\\\"language-text\\\">resolve(value)</code>相当于调用了内部定义的<code class=\\\"language-text\\\">resolve(promise, value)</code>，我们调用<code class=\\\"language-text\\\">reject(reason)</code>相当于调用了内部定义的<code class=\\\"language-text\\\">reject(promise, reason)</code>。因此可以看出，当我们创建了一个<code class=\\\"language-text\\\">Promise</code>之后，<code class=\\\"language-text\\\">Promise</code>的<code class=\\\"language-text\\\">resolver</code>会直接开始运行。</p>\\n<p>那么接下来让我们看一下<code class=\\\"language-text\\\">resolve(promise, value)</code>的实现</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">selfFulfillment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">objectOrFunction</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleMaybeThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">getThen</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>首先来看第一个判断，这个判断检查了当前的<code class=\\\"language-text\\\">promise</code>是否和<code class=\\\"language-text\\\">resolve</code>的<code class=\\\"language-text\\\">value</code>是相同的，如果相同则执行<code class=\\\"language-text\\\">reject</code>，关于 reject 我们可以稍后再来讲解，但是大致是一个跑出异常的途径，而<code class=\\\"language-text\\\">selfFulfillment</code>则返回一个错误</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">selfFulfillment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"You cannot resolve a promise with itself\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>也就是说，在promise和resolve的value相同的情况下，会返回一个异常，比如</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Promise reject with type error</span></code></pre>\\n      </div>\\n<p>这点和原生的Promise可能会有点出入，原生的<code class=\\\"language-text\\\">Promise</code>在执行上述第一行后会向外抛出一个异常，而且异常描述和<code class=\\\"language-text\\\">es-promise</code>不同，原生异常描述为<code class=\\\"language-text\\\">Chaining cycle detected for promise #&lt;Promise&gt;</code> 但是其实应该是一个意思。</p>\\n<p>接着下一个判断<code class=\\\"language-text\\\">objectOrFunction(value)</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">objectOrFunction</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> type <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> x<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token punctuation\\\">(</span>type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">||</span> type <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这是一个简单的判断是否为对象挥着函数的方法能够通过校验的有 <code class=\\\"language-text\\\">函数、纯对象、数组、类</code></p>\\n<p>接着如果是个对象或者函数的话，执行一个<code class=\\\"language-text\\\">handleMaybeThenable</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleMaybeThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">,</span> then<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">===</span> promise<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">&amp;&amp;</span>\\n      then <span class=\\\"token operator\\\">===</span> originalThen <span class=\\\"token operator\\\">&amp;&amp;</span>\\n      maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor<span class=\\\"token punctuation\\\">.</span>resolve <span class=\\\"token operator\\\">===</span> originalResolve<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleOwnThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>then <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>then <span class=\\\"token operator\\\">===</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">isFunction</span><span class=\\\"token punctuation\\\">(</span>then<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">handleForeignThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">,</span> then<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> maybeThenable<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里先解释一下入参，<code class=\\\"language-text\\\">promise</code>是当前的promise，<code class=\\\"language-text\\\">maybeThenable</code>是<code class=\\\"language-text\\\">resolve</code>的<code class=\\\"language-text\\\">value</code>且这个value是对象或者函数，<code class=\\\"language-text\\\">then</code>是通过一个<code class=\\\"language-text\\\">getThen(value)</code>的函数来获取的</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getThen</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> promise<span class=\\\"token punctuation\\\">.</span>then<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> error<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这个函数尝试获取了promise的then属性、这里的try/catch我不是很看得懂，应该只有一部分开发人员实在作死的情况下才能够抛出异常。</p>\\n<p>那么三个入参已经解释完了，我们首先来看第一个判断</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor <span class=\\\"token operator\\\">===</span> promise<span class=\\\"token punctuation\\\">.</span>constructor\\n<span class=\\\"token operator\\\">&amp;&amp;</span> then <span class=\\\"token operator\\\">===</span> originalThen\\n<span class=\\\"token operator\\\">&amp;&amp;</span> maybeThenable<span class=\\\"token punctuation\\\">.</span>constructor<span class=\\\"token punctuation\\\">.</span>resolve <span class=\\\"token operator\\\">===</span> originalResolve</code></pre>\\n      </div>\\n<p>总的来说，先判断了当前resolve的value是否是一个promise的实例，然后判断value.then是否是一个正常的then(和定义的promise的then函数相同)，通过这个判断就能够确定当前的value就是一个正常的<code class=\\\"language-text\\\">promise</code>实例</p>\\n<p>针对返回的<code class=\\\"language-text\\\">promise</code>会调用函数<code class=\\\"language-text\\\">handleOwnThenable</code>来处理</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleOwnThenable</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> thenable<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thenable<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> thenable<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>thenable<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> thenable<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>thenable<span class=\\\"token punctuation\\\">,</span> undefined<span class=\\\"token punctuation\\\">,</span> value  <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                                   reason <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里的promise和thenable分别是当前的promise对象和resolve的value，而thenable其实经过判断也是一个合法的promise，这里校验了resolve的promise的<code class=\\\"language-text\\\">_state</code>。</p>\\n<p>如果thenable是一个已经完成的<code class=\\\"language-text\\\">promise</code>的话，调用<code class=\\\"language-text\\\">fullfill()</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">!==</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n  promise<span class=\\\"token punctuation\\\">.</span>_result <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_subscribers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publish<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>再次介绍一下这里的入参，promise是当前的promise实例，value是resolve的promise在fulfill之后的返回值，首先<code class=\\\"language-text\\\">fullfill</code>本身也会校验<code class=\\\"language-text\\\">promise</code>的状态，然后将当前的promise实例赋值状态和当前的值。后续去判断了一个<code class=\\\"language-text\\\">promise._subscribers</code>的长度，关于这个<code class=\\\"language-text\\\">promise._subscribers</code>应该只是这个<code class=\\\"language-text\\\">es-promise</code>自己实现的需要，原生的<code class=\\\"language-text\\\">promise</code>是没有这个属性的，我们没有去关注原生的promise的实现方式，暂且关系这个<code class=\\\"language-text\\\">es-promise</code>的实现吧，而这个<code class=\\\"language-text\\\">promise._subscribers</code>在后续会讲到，可以先理解为一系列已经注册的观察者。至于这些观察者是什么时候注册，后续会娓娓道来。那么我们现在可能比较关心的就是如何理解<code class=\\\"language-text\\\">asap(publish, promise)</code>这个调用</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">asap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">,</span> arg<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  queue<span class=\\\"token punctuation\\\">[</span>len<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> callback<span class=\\\"token punctuation\\\">;</span>\\n  queue<span class=\\\"token punctuation\\\">[</span>len <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arg<span class=\\\"token punctuation\\\">;</span>\\n  len <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>len <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// If len is 2, that means that we need to schedule an async flush.</span>\\n    <span class=\\\"token comment\\\">// If additional callbacks are queued before the queue is flushed, they</span>\\n    <span class=\\\"token comment\\\">// will be processed by this flush that we are scheduling.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>customSchedulerFn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">customSchedulerFn</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">scheduleFlush</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">queue</code>是一个全局的变量，每次执行asap都会将回调函数callback和该回调函数所需的参数arg放到队列<code class=\\\"language-text\\\">queue</code>中，而len记录了当前queue的长度，当长度为2，也就是说，本来队列中为空的情况下会去执行<code class=\\\"language-text\\\">scheduleFlush()</code>这里有个判断，会判断<code class=\\\"language-text\\\">customSchedulerFn</code>这个变量，这个变量会在开发人员调用了<code class=\\\"language-text\\\">setScheduler</code>设置成开发人员自定义的<code class=\\\"language-text\\\">scheduleFlush</code>，而系统已经更具浏览器的兼容情况为我们提供了<code class=\\\"language-text\\\">scheduleFlush</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">let</span> scheduleFlush<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Decide what async method to use to triggering processing of queued callbacks:</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isNode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useNextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>BrowserMutationObserver<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMutationObserver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isWorker<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMessageChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>browserWindow <span class=\\\"token operator\\\">===</span> undefined <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">typeof</span> require <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">attemptVertx</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  scheduleFlush <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useSetTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>我们先看<code class=\\\"language-text\\\">isNode</code>的情况</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useNextTick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">nextTick</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以发现，其实scheduleFlush就是想在下一个事件循环中执行flush的操作。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">flush</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">+=</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> callback <span class=\\\"token operator\\\">=</span> queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> arg <span class=\\\"token operator\\\">=</span> queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    queue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  len <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>而flush就是讲队列中的任务逐个执行，这里没有将队列中的数据排出，这就是为什么还需要个len来表示当前队列的实际长度</p>\\n<p>接下来的各种判断就是根据浏览器来决定用什么方式来实现“下个事件循环”中执行</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useMutationObserver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> iterations <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> observer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">BrowserMutationObserver</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> node <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createTextNode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  observer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> characterData<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    node<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>iterations <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">++</span>iterations <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">useMutationObserver</code>是通过MutationObserver的监听来实现事件循环，关于MutationObserver的浏览器兼容问题，可以查看<a href=\\\"https://caniuse.com/#search=MutationObserver\\\">can i use </a></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// web worker</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useMessageChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> channel <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MessageChannel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  channel<span class=\\\"token punctuation\\\">.</span>port1<span class=\\\"token punctuation\\\">.</span>onmessage <span class=\\\"token operator\\\">=</span> flush<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> channel<span class=\\\"token punctuation\\\">.</span>port2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">postMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">useMessageChannel</code>是通过web worker的<code class=\\\"language-text\\\">MessageChannel</code>来实现事件循环的，关于<code class=\\\"language-text\\\">MessageChannel</code>的浏览器兼容问题，可以查看<a href=\\\"https://caniuse.com/#search=MessageChannel\\\">can i use</a></p>\\n<p>最后，保底会使用setTimeout来实现事件循环</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useSetTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> globalSetTimeout <span class=\\\"token operator\\\">=</span> setTimeout<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">globalSetTimeout</span><span class=\\\"token punctuation\\\">(</span>flush<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>当然这并不是很科学的下个事件循环的实现，只是模拟的一个简短的延迟执行。</p>\\n<p>回过头来我们继续看调用这个<code class=\\\"language-text\\\">asap</code>的代码</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publish<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>通过查看刚才对<code class=\\\"language-text\\\">asap</code>这个函数的立即，上述代码可以理解为下个事件循环执行<code class=\\\"language-text\\\">publish(promise)</code>函数，那么再看查看一下<code class=\\\"language-text\\\">publish(promise)</code>这个函数</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> subscribers <span class=\\\"token operator\\\">=</span> promise<span class=\\\"token punctuation\\\">.</span>_subscribers<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> settled <span class=\\\"token operator\\\">=</span> promise<span class=\\\"token punctuation\\\">.</span>_state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>subscribers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> child<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> detail <span class=\\\"token operator\\\">=</span> promise<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> subscribers<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    child <span class=\\\"token operator\\\">=</span> subscribers<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    callback <span class=\\\"token operator\\\">=</span> subscribers<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> settled<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">invokeCallback</span><span class=\\\"token punctuation\\\">(</span>settled<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> detail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">callback</span><span class=\\\"token punctuation\\\">(</span>detail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_subscribers<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>publish获取了promise的subscribers，subscribers中的数据是循环的使用<code class=\\\"language-text\\\">[...&lt;promise&gt;, &lt;resolved callback&gt;, &lt;rejected callback&gt;...]</code> 如果 subscribers 中没有观察者，则什么都不做，否则循环。在每个循环中，取到观察者promise，通过当前的promise的状态来获取应该使用resolve还是reject</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">callback <span class=\\\"token operator\\\">=</span> subscribers<span class=\\\"token punctuation\\\">[</span>i <span class=\\\"token operator\\\">+</span> settled<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>由于<code class=\\\"language-text\\\">es-promise</code>对state的定义为:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">PENDING</span>   <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">FULFILLED</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">REJECTED</span>  <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>所以可以直接通过<code class=\\\"language-text\\\">subscribers[i + settled]</code>来获取到当前的callback, 获取到callback之后会校验观察者的promise是否存在，如果存在就调用<code class=\\\"language-text\\\">invokeCallback</code>，否则就调用<code class=\\\"language-text\\\">callback(detail)</code>，相当于直接调用注册的的resolve或者reject的回调，<code class=\\\"language-text\\\">callback(detail)</code>这个很好理解，那么我们再看看<code class=\\\"language-text\\\">invokeCallback</code>做了什么</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">invokeCallback</span><span class=\\\"token punctuation\\\">(</span>settled<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> detail<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> hasCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">isFunction</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      value<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">,</span> succeeded<span class=\\\"token punctuation\\\">,</span> failed<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>hasCallback<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    value <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">tryCatch</span><span class=\\\"token punctuation\\\">(</span>callback<span class=\\\"token punctuation\\\">,</span> detail<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">TRY_CATCH_ERROR</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      failed <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      error <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">.</span>error<span class=\\\"token punctuation\\\">;</span>\\n      value<span class=\\\"token punctuation\\\">.</span>error <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      succeeded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">cannotReturnOwn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    value <span class=\\\"token operator\\\">=</span> detail<span class=\\\"token punctuation\\\">;</span>\\n    succeeded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">!==</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// noop</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>hasCallback <span class=\\\"token operator\\\">&amp;&amp;</span> succeeded<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>failed<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> error<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>settled <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">fulfill</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>settled <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这又是一个需要回顾入参的函数，settled为当前Promise的状态，promise为当前的观察的promise的实例，callback为当前观察者注册的父promise在resolve或者reject后的回调，detail是当前promise在fullfill后的返回值，首先会校验是否callback是否为一个函数，如果是一个函数，会尝试执行这个函数，那么可能我们就要关心一个这个函数到底是什么东西，也是时候讲述一下这写subscriber是什么时候注册的了，在之前的代码中我们已经看到过一次注册的地方了，在<code class=\\\"language-text\\\">handleOwnThenable</code>中如果当前的promise为pedding的状态的话会执行<code class=\\\"language-text\\\">subscribe(thenable, undefined, value  =&gt; resolve(promise, value), reason =&gt; reject(promise, reason))</code>，可以看一下<code class=\\\"language-text\\\">subscribe</code>的实现</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> onFulfillment<span class=\\\"token punctuation\\\">,</span> onRejection<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> _subscribers <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> parent<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">{</span> length <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> _subscribers<span class=\\\"token punctuation\\\">;</span>\\n  parent<span class=\\\"token punctuation\\\">.</span>_onerror <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  _subscribers<span class=\\\"token punctuation\\\">[</span>length<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> child<span class=\\\"token punctuation\\\">;</span>\\n  _subscribers<span class=\\\"token punctuation\\\">[</span>length <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> onFulfillment<span class=\\\"token punctuation\\\">;</span>\\n  _subscribers<span class=\\\"token punctuation\\\">[</span>length <span class=\\\"token operator\\\">+</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">]</span>  <span class=\\\"token operator\\\">=</span> onRejection<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> parent<span class=\\\"token punctuation\\\">.</span>_state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publish<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>subscribe在当前promise的_subscribers中插入观察者信息（promise、resolve、reject），判断当前的<code class=\\\"language-text\\\">promise</code>如果为非pedding状态且之前观察者队列为空的话，可以直接在下个事件循环中，通知所有的观察者当前的promise已经完成，并执行回调。回看<code class=\\\"language-text\\\">invokeCallback</code>的callback应该就是<code class=\\\"language-text\\\">subscribe</code>的<code class=\\\"language-text\\\">onFullfillment</code>或者<code class=\\\"language-text\\\">onRejection</code>，这个参数是在调用<code class=\\\"language-text\\\">subscribe</code>的时候传入的，<code class=\\\"language-text\\\">handleOwnThenable</code>中最后就是调用了<code class=\\\"language-text\\\">resolve(promise, value)</code>和<code class=\\\"language-text\\\">reject(promise, error)</code>来作为<code class=\\\"language-text\\\">onFullfillment</code>和<code class=\\\"language-text\\\">onRejection</code>。当然之前的<code class=\\\"language-text\\\">handleOwnThenable</code>中调用的<code class=\\\"language-text\\\">subscribe</code>显然不会走到<code class=\\\"language-text\\\">invokeCallback</code>的逻辑中，因为那个<code class=\\\"language-text\\\">subscribe</code>的child是空的，最后在publish的时候<code class=\\\"language-text\\\">child</code>为空会直接执行<code class=\\\"language-text\\\">callback(detail)</code>，那么什么时候执行<code class=\\\"language-text\\\">invokeCallback</code>呢，可以查看一下还有什么地方会调用<code class=\\\"language-text\\\">subscribe</code>。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>onFulfillment<span class=\\\"token punctuation\\\">,</span> onRejection<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> parent <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> child <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">this<span class=\\\"token punctuation\\\">.</span>cnstructor</span><span class=\\\"token punctuation\\\">(</span>noop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">PROMISE_ID</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">===</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">makePromise</span><span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> _state <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> parent<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> callback <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">[</span>_state <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">invokeCallback</span><span class=\\\"token punctuation\\\">(</span>_state<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>parent<span class=\\\"token punctuation\\\">,</span> child<span class=\\\"token punctuation\\\">,</span> onFulfillment<span class=\\\"token punctuation\\\">,</span> onRejection<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> child<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>可以看到 Promise.prototype.then 是如上实现的，每个promise.then都会创建一个新的<code class=\\\"language-text\\\">promise</code>，并且在then执行结束的时候返回它，如果当前promise的状态还处于pendding会注册一个监听，这个监听在当前promise完成之后会执行传入onFulfillment或者onRejection，不然会直接在下个事件循环中执行onFulfillment和onRejection，这里的subscribe会传入一个child，所以会在最后执行publish的时候执行invokeCallback</p>\\n<p>所以总的来说，invokeCallback执行的一般可能是then的时候onFulfillment或onRejection，或者可能是创建一个Promise的时候resolve一个新的promise的时候</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// example1</span>\\nPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 这里的then会注册一个subscribe然后会触发invokeCallback，callback参数为() => 1</span>\\n<span class=\\\"token comment\\\">// example2</span>\\nPromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span>resolve <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 因为resolve了一个promise，会subscribe这个resolve的promise，在这个promise结束的时候，改变自身的状态并且尝试publish自己的所有subscribers</span></code></pre>\\n      </div>\\n<p>回到开始的<code class=\\\"language-text\\\">initializePromise</code>，我们解释了一大圈resolve的逻辑，现在再看看reject的逻辑</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">!==</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">REJECTED</span><span class=\\\"token punctuation\\\">;</span>\\n  promise<span class=\\\"token punctuation\\\">.</span>_result <span class=\\\"token operator\\\">=</span> reason<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">asap</span><span class=\\\"token punctuation\\\">(</span>publishRejection<span class=\\\"token punctuation\\\">,</span> promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>其实reject的逻辑很简单，就是讲当前的promise的状态设置rejected并赋值相应的原因，在下个事件循环中调用<code class=\\\"language-text\\\">publishRejection</code></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">publishRejection</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_onerror<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">_onerror</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">.</span>_result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">publish</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">publishRejection</code>的实现其实只是在正常的publish之前尝试调用了<code class=\\\"language-text\\\">promise._onerror</code>，我不知道这个是不是原生promise的标准，这个<code class=\\\"language-text\\\">es-promise</code>是存在这个逻辑的。</p>\",\"frontmatter\":{\"title\":\"尝试理解Promise源码\",\"date\":\"22 November, 2018\",\"tag\":\"Promise,ES\"}}},\"pathContext\":{\"slug\":\"read-code-es-promise-polyfill\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-read-code-es-promise-polyfill.json\n// module id = 373\n// module chunks = 236054049938401"],"sourceRoot":""}