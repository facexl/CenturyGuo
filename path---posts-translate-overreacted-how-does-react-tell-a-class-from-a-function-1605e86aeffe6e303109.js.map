{"version":3,"sources":["webpack:///path---posts-translate-overreacted-how-does-react-tell-a-class-from-a-function-1605e86aeffe6e303109.js","webpack:///./.cache/json/posts-translate-overreacted-how-does-react-tell-a-class-from-a-function.json"],"names":["webpackJsonp","396","module","exports","data","markdownRemark","html","frontmatter","title","date","tag","pathContext","slug"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAkmvDC,aAAi/CC,MAAA,4BAAAC,KAAA,oBAAAC,IAAA,2BAA+FC,aAAgBC,KAAA","file":"path---posts-translate-overreacted-how-does-react-tell-a-class-from-a-function-1605e86aeffe6e303109.js","sourcesContent":["webpackJsonp([9756229565306],{\n\n/***/ 396:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>本文出自<a href=\\\"https://overreacted.io/\\\">overreacted</a>，这是<a href=\\\"https://mobile.twitter.com/dan_abramov\\\">Dan Abramov</a>写的博客，我觉得对很有用所以特意做了这个翻译<a href=\\\"/posts/overreacted\\\">系列</a>，原文链接请查看<a href=\\\"https://overreacted.io/how-does-react-tell-a-class-from-a-function/\\\">这里</a></p>\\n</blockquote>\\n<p>我们可以先来看一下这个用函数定义的<code class=\\\"language-text\\\">Greeting</code>组件:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>React也支持将这个组件定义成一个类:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>(我们只能使用类的定义的方式来使用一些类似于state这样的功能，知道最近的<a href=\\\"https://reactjs.org/docs/hooks-intro.html\\\">hooks</a>)</p>\\n<p>当你想要渲染<code class=\\\"language-text\\\">&lt;Greeting /&gt;</code>时，你不用关系它究竟是如何定义的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// 无论是函数定义还是类定义</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Greeting</span> <span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>但是 <em>React 自己</em> 会关心这两种定义方式的区别</p>\\n<p>如果<code class=\\\"language-text\\\">Greeting</code>是一个函数，React会直接调用它:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 你的代码</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// React内部的实现</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span></code></pre>\\n      </div>\\n<p>但是如果<code class=\\\"language-text\\\">Greeting</code>是一个类，React需要先试用<code class=\\\"language-text\\\">new</code>来实例化它，然后在调用它的<code class=\\\"language-text\\\">render</code>函数:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 你的代码</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// React内部实现</span>\\n<span class=\\\"token keyword\\\">const</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Greeting {}</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> instance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span></code></pre>\\n      </div>\\n<p>在上面的两个例子中，React的目标都是一致的，就是将你需要渲染的React节点获取到（在这个例子中，是<code class=\\\"language-text\\\">&lt;p&gt;Hellp&lt;/p&gt;</code>）。但是这些额外的操作取决于<code class=\\\"language-text\\\">Greeting</code>是如何定义的。</p>\\n<p><strong>那么React是如何知道这个组件是使用函数定义的还是类定义的呢？</strong></p>\\n<p>就想我<a href=\\\"/posts/translate-overreacted-why-do-we-write-super-props\\\">之前的文章</a>讲的那样，<strong>对于使用React的时候，你并不<em>需要</em>了解这些</strong> 很多年里，我也不知道这些。所以请不要将这些作为你的面试题目。事实上，这篇文章更多的是讲解Javascript而不是React</p>\\n<p>这篇文章是针对那些想知道React究竟如何工作的人的。你是这样的人么？那么让我们一起来探索吧。</p>\\n<p><strong>这是一篇非常长的旅程。系好安全带吧！这篇文章并不会有太多的关于React本身，但是我们会探索到一些概念，比如<code class=\\\"language-text\\\">new</code>,<code class=\\\"language-text\\\">this</code>,<code class=\\\"language-text\\\">class</code>,<code class=\\\"language-text\\\">arrow</code>,<code class=\\\"language-text\\\">functions</code>,<code class=\\\"language-text\\\">prototypela</code>, <code class=\\\"language-text\\\">_proto_</code>,<code class=\\\"language-text\\\">instanceof</code>,以及这些东西在Javascript中是如何一起工作的。非常幸运的是，你在使用React的时候并不需要太考虑这些。不过假如你在实现React的话，那就不一样了...</strong></p>\\n<p>(如果你真的只是想知道最终的答案的话，可以直接滚动到最底下)</p>\\n<hr>\\n<p>首先，我们需要理解为什么有必要去对函数的申明方式和类的申明方式区分。可以注意一下我们在使用类的申明组件的时候发生了什么。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 如果Greeting是一个函数</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span>\\n\\n<span class=\\\"token comment\\\">// 如果Greeting是一个类</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Greeting {}</span>\\n</span><span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> instance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span></code></pre>\\n      </div>\\n<p>让我们深度的来了解一下当使用<code class=\\\"language-text\\\">new</code>的时候，Javascript做了什么</p>\\n<hr>\\n<p>在比较早的时候，Javascript还没有定义类的方式。但是你可以通过纯函数来模拟出一个类的效果。<strong>具体的来说就是，通过对函数使用<code class=\\\"language-text\\\">new</code>调用，你可以使用<em>任何</em>函数来作为一个类的构造函数</strong>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 这只是一个函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ Person {name: 'Fred'}</span>\\n<span class=\\\"token keyword\\\">var</span> george <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'George'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 🔴 并不起作用</span></code></pre>\\n      </div>\\n<p>这些代码依然可以使用，你可以在开发工具中尝试。</p>\\n<p>如果你在调用<code class=\\\"language-text\\\">Person(&#39;Fred&#39;)</code>的时候<strong>不使用</strong><code class=\\\"language-text\\\">new</code>操作符，函数内的<code class=\\\"language-text\\\">this</code>指向就会指向一些全局或者没有什么用的对象(比如说，<code class=\\\"language-text\\\">window</code>或者<code class=\\\"language-text\\\">undefined</code>)。如果这么使用的话，我们的代码就会报错或者执行一些设置<code class=\\\"language-text\\\">window.name</code>之类的傻兮兮的事情。</p>\\n<p>通过在调用前添加<code class=\\\"language-text\\\">new</code>的操作符。我们相当于在说: \\\"Hey Javascript，我知道<code class=\\\"language-text\\\">Person</code>是一个函数啦，但是可以不可以让我们假装它是一个构造函数\\\"。<strong>创建一个空对象，然后让<code class=\\\"language-text\\\">Person</code>函数中的<code class=\\\"language-text\\\">this</code>指向这个对象，这样我们就能够为这个对象设置像<code class=\\\"language-text\\\">this.name</code>这样的成员变量。然后将这个对象返回</strong></p>\\n<p>这就是<code class=\\\"language-text\\\">new</code>这个操作符做的事情</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回构造函数中的this</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">new</code>这个操作也将<code class=\\\"language-text\\\">Person.prototype</code>中的成员变量代理到了<code class=\\\"language-text\\\">fred</code>的对象上:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nPerson<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sayHi</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hi, I am '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这就是大家在Javascript推出类的写法之前模拟出来的类</p>\\n<hr>\\n<p>所以<code class=\\\"language-text\\\">new</code>在Javascript中已经存在了很长时间了，但是，classes是最近几年才有的。使用它，我们可以重新编写我们的代码，让我们离今天要探究的事情更加贴切。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Person</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hi, I am '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><em>抓住开发者想要的东西</em>在设计语言和API的时候是非常重要的。</p>\\n<p>如果你写了一个函数，Javascript不能够完全明白究竟者意味着是像<code class=\\\"language-text\\\">alert()</code>这样直接调用或者会像<code class=\\\"language-text\\\">new Person()</code>这样当做一个构造函数来调用。如果忘记掉在像<code class=\\\"language-text\\\">Person</code>这种函数前面加上<code class=\\\"language-text\\\">new</code>操作符会让代码出现一些神奇的现象。</p>\\n<p><strong>Class的预发让我们告诉Javascript的运行者: \\\"这不是只是一个函数 - 这是一个类，他有一个构造函数\\\"</strong>，当你在调用它的时候忘记使用<code class=\\\"language-text\\\">new</code>操作符的时候，Javascript会抛出一个异常:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ✅ 如果Person是一个函数，没有问题</span>\\n<span class=\\\"token comment\\\">// ✅ 如果Person是一个类，没有问题</span>\\n\\n<span class=\\\"token keyword\\\">let</span> george <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'George'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 我们忘记添加`new`</span>\\n<span class=\\\"token comment\\\">// 😳 如果用户是一个类似构造函数的函数 这个函数执行会出现一些奇怪的情况</span>\\n<span class=\\\"token comment\\\">// 🔴 如果Person是一个类，会立马抛出异常</span></code></pre>\\n      </div>\\n<p>这让我们在出现一些类似于<code class=\\\"language-text\\\">this.name</code>被赋值为<code class=\\\"language-text\\\">window.name</code>而不是<code class=\\\"language-text\\\">georage.name</code>的问题之前就能够及早的发现问题。</p>\\n<p>所以，这就代表着React需要在创建类之前加上一个<code class=\\\"language-text\\\">new</code>，我们不能够像普通的函数那样调用它，因为Javascript会抛出一个异常</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Counter</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 🔴 React 不能这么做:</span>\\n<span class=\\\"token keyword\\\">const</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>像这么写会有问题。</p>\\n<hr>\\n<p>在我们了解React是如何处理这类问题之前，我们需要知道，大多数人在使用React的时候会用到类似于Babel这样的编译工具，从而能够在旧的浏览器上使用类似于class这样的语法。所以我们需要在我们的设计中考虑到编译工具的存在。</p>\\n<p>在一些老点的版本的Babel中，class不需要new也能够调用，但是这当时也是可以解决的 - 通过添加一些额外的代码:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// A bit simplified from Babel output:</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Cannot call a class as a function\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Our code:</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ Okay</span>\\n<span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'George'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 🔴 Can’t call class as a function</span></code></pre>\\n      </div>\\n<p>你可能可以在你的打包后的文件中能够看到这些类似的代码。其实这就是那些<code class=\\\"language-text\\\">_classCallCheck</code>的函数做的事情。(你可以使用一个疏松模式(loose mode)来通过不检查来减少最终打包后的包大小，但是这可能会让你想用上真正的class的时候变得更加复杂)</p>\\n<hr>\\n<p>现在，你应该能够明白在调用函数的时候使用<code class=\\\"language-text\\\">new</code>和不使用<code class=\\\"language-text\\\">new</code>的区别:</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th><code class=\\\"language-text\\\">new Person()</code></th>\\n<th><code class=\\\"language-text\\\">Person()</code></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code class=\\\"language-text\\\">class</code></td>\\n<td>✅ \\n<code class=\\\"language-text\\\">this</code>\\n 是 \\n<code class=\\\"language-text\\\">Person</code>\\n 的实例</td>\\n<td>🔴 \\n<code class=\\\"language-text\\\">TypeError</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">function</code></td>\\n<td>✅ \\n<code class=\\\"language-text\\\">this</code>\\n 是 \\n<code class=\\\"language-text\\\">Person</code>\\n 实例</td>\\n<td>😳 \\n<code class=\\\"language-text\\\">this</code>\\n 是 \\n<code class=\\\"language-text\\\">window</code>\\n 或者 \\n<code class=\\\"language-text\\\">undefined</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>这就是为什么你需要正确的调用你的组件。 <strong>如果你的组件是使用class来定义的，React需要使用<code class=\\\"language-text\\\">new</code>来调用</strong></p>\\n<p>那么React是怎么确定组件究竟是类还是其他的类型呢?</p>\\n<p>这没有那么简单！即使我们本就可以<a href=\\\"https://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function\\\">在Javascript中区分class和函数</a>，但是这对那些通过类似Babael这样的工具编译的class没用，编译之后这些class会变成一个纯函数。React觉得很难玩儿。</p>\\n<hr>\\n<p>OK! 那是不是React可以在每次调用的时候都使用<code class=\\\"language-text\\\">new</code>？非常不幸，这也不行。</p>\\n<p>在函数中，使用<code class=\\\"language-text\\\">new</code>来调用会在内部返回一个<code class=\\\"language-text\\\">this</code>的对象。这对构造函数(比如<code class=\\\"language-text\\\">Person</code>)会比较合理，但是对于纯函数定义的组件而言，看起来就就会比较奇怪了</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 我们不希望`this`是任何对象</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这么做或许可以勉强使用，但是这里还有<em>其他的</em>两个原因让我们不使用这种方式。</p>\\n<hr>\\n<p>我们不能无脑使用<code class=\\\"language-text\\\">new</code>操作符的第一个原因就是如果函数是一个箭头函数(不是被Babel编译出来的)，使用<code class=\\\"language-text\\\">new</code>执行之后会抛出一个异常：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Greeting</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 🔴 Greeting不是一个构造函数</span></code></pre>\\n      </div>\\n<p>这里是故意使用箭头函数的。根据箭头函数的设计，箭头函数的其中一个优点就是我们<em>不用</em>在意这个函数自己的<code class=\\\"language-text\\\">this</code> - 因为这个<code class=\\\"language-text\\\">this</code>是指向最近的普通函数的<code class=\\\"language-text\\\">this</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Friends</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> friends <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>friends<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> friends<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>friend <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token operator\\\">&lt;</span>Friend\\n        <span class=\\\"token comment\\\">// `this`会使用`render`函数的`this`</span>\\n        size<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>size<span class=\\\"token punctuation\\\">}</span>\\n        name<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>friend<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n        key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>那么所以 <em>箭头函数自己本身没有<code class=\\\"language-text\\\">this</code></em> 这就意味着他不可能成为一个构造函数!</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Person</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 🔴 这没有用</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>因此，<strong>Javascript不允许使用<code class=\\\"language-text\\\">new</code>来调用箭头函数</strong> 如果你这么做，那么你可能会导致代码出问题，所以需要提前抛出异常。这就和之前提到的为什么Javascript不能让你在调用类的时候不使用<code class=\\\"language-text\\\">new</code>的道理一样。</p>\\n<p>这是一个很合理的做法，但是这让我们之前的计划落空。React不能让我们在所有函数前面使用<code class=\\\"language-text\\\">new</code>，因为在使用箭头函数的时候会发生报错！我们只能够尝试检查一个函数是否为箭头函数，因为箭头函数没有<code class=\\\"language-text\\\">prototype</code>，并且对这类函数，不使用<code class=\\\"language-text\\\">new</code>来调用:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// undefined</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// {constructor: f}</span></code></pre>\\n      </div>\\n<p>但是这对Babel编译出来的函数<a href=\\\"https://github.com/facebook/react/issues/4599#issuecomment-136562930\\\">不起作用</a>。但是这看起来也不一定是个大问题(因为我们应该也不会在箭头函数里面写<code class=\\\"language-text\\\">this</code>)，但是这里另一个原因让我们的这个方案几乎完蛋。</p>\\n<hr>\\n<p>另一个我们不能无脑使用<code class=\\\"language-text\\\">new</code>操作符的原因是我们还需要排除那些React支持的直接返回字符串或者其他基础类型的组件。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Hello'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ 'Hello'</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😳 Greeting {}</span></code></pre>\\n      </div>\\n<p>额。。。我们需要再一次看一下<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\\\"><code class=\\\"language-text\\\">new</code>操作符</a>的设计。根据我们之前所知道的，<code class=\\\"language-text\\\">new</code>告诉Javascript引擎去创建一个对象，对构造函数的内部的<code class=\\\"language-text\\\">this</code>赋值，然后在最后返回一个对象给我们。</p>\\n<p>但是Javascript也允许一个使用<code class=\\\"language-text\\\">new</code>调用的函数返回一个另外的对象来覆盖这个函数内部的this。想必这是为了考虑这可能对类似重用对象实例之类的模式比较有用吧:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 懒加载</span>\\n<span class=\\\"token keyword\\\">var</span> zeroVector <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Vector</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>zeroVector <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// Reuse the same instance</span>\\n      <span class=\\\"token keyword\\\">return</span> zeroVector<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    zeroVector <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😲 b === c</span></code></pre>\\n      </div>\\n<p>但是，当一个函数返回非对象类型的值的时候，<code class=\\\"language-text\\\">new</code>就会无视这个返回值。比如说如果你返回一个字符串或者数字，它就会当做什么都没有返回。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Answer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">Answer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ 42</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Answer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😳 Answer {}</span></code></pre>\\n      </div>\\n<p>因为使用<code class=\\\"language-text\\\">new</code>来调用函数的时候，返回一个基本类型(比如数字或者字符串)会被无视。所以如果React无脑使用<code class=\\\"language-text\\\">new</code>,就不能够支持哪些直接返回字符串类型的组建了!</p>\\n<p>这显然对开发者来说是不可接受的，所以我们只能在换个法子。</p>\\n<hr>\\n<p>至今为止，我们一共总结了什么？React需要在调用class（包括Babel编译输出的）使用<code class=\\\"language-text\\\">new</code>操作符，但是我们需要在调用普通函数或者箭头函数的时候不使用<code class=\\\"language-text\\\">new</code>操作符。而现在好像还没有一个可行的方案来区分他们。</p>\\n<p><strong>如果我们不能够解决普遍的问题，那我们可以尝试去解决哪个比较特殊的问题吗?</strong></p>\\n<p>当我们使用类来定义组建的饿时候，我们一般会去继承<code class=\\\"language-text\\\">React.Component</code>，为了使用一些内置的函数，比如<code class=\\\"language-text\\\">this.setState()</code>。<strong>换个想法来看，我们去区分所有的类无法做到的话，我们是不是可以考虑只检查React.Component的子类呢</strong></p>\\n<p>Spoiler: 这正式React做的事情</p>\\n<hr>\\n<p>当然，常用的用来检查<code class=\\\"language-text\\\">Greeting</code>是否是React组件的类的子类的方式就是取检查是否<code class=\\\"language-text\\\">Greeting.prototype</code>是否是React.Component的实例:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">B</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span></code></pre>\\n      </div>\\n<p>我知道你在想什么，这段代码的运行结果为什么会是这样？！为了回答这个问题，我们需要理解Javascript原型。</p>\\n<p>你可能对Javascript原型链非常熟悉。每个在Javascript中的对象都会有一个原型，当我们在调用<code class=\\\"language-text\\\">gred.sayHi()</code>但是<code class=\\\"language-text\\\">fred</code>的对象没有<code class=\\\"language-text\\\">sayHi</code>的属性的时候，我们会在<code class=\\\"language-text\\\">fred</code>的原型链上寻找<code class=\\\"language-text\\\">sayHi</code>的属性，如果我们不能够在原型链上找到它，我们会在这个原型链上的下一个原型链（<code class=\\\"language-text\\\">fred</code>的原型的原型），就这么循环执行下去。</p>\\n<p>我不是在开玩笑...<strong>有个很奇怪的问题，一个函数或者类的<code class=\\\"language-text\\\">prototype</code>属性 <em>并不</em> 指向这个实例的<code class=\\\"language-text\\\">prototype</code></strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Person<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 🤪 Not Person's prototype</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Person<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😳 Person's prototype</span></code></pre>\\n      </div>\\n<p>所以\\\"原型链\\\"应该是类似于<code class=\\\"language-text\\\">__proto__.__proto__.__proto__</code>，而不是<code class=\\\"language-text\\\">prototype.prototype.prototype</code>。我也是很多年才明白这点。</p>\\n<p>在类或者函数上设置了<code class=\\\"language-text\\\">prototype</code>, <strong>但最后通过<code class=\\\"language-text\\\">new</code>操作符创建的对象我们是通过<code class=\\\"language-text\\\">__proto__</code>来获取原型上属性</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nPerson<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sayHi</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hi, I am '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Sets `fred.__proto__` to `Person.prototype`</span></code></pre>\\n      </div>\\n<p>Javascript就是使用<code class=\\\"language-text\\\">__proto__</code>链来查找属性的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">fred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 1. fred是否含有这个sayHi属性? No.</span>\\n<span class=\\\"token comment\\\">// 2. fred.__proto__ 是否有 sayHi的属性 ？ 是的. 那么就调用它!</span>\\n\\nfred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 1. fred是否含有这个toString属性? No.</span>\\n<span class=\\\"token comment\\\">// 2. fred.__proto__ 是否有 toString的属性 ？ No.</span>\\n<span class=\\\"token comment\\\">// 3. fred.__proto__.__proto__ 是否有 toString的属性 ？ 是的. 那么就调用它!</span></code></pre>\\n      </div>\\n<p>在实际使用场景中，你可能不需要自己去在代码中直接接触<code class=\\\"language-text\\\">__proto__</code>，除非你需要对原型链上相关的东西做调试。如果你想要让某个成员变量挂载在<code class=\\\"language-text\\\">fred.__proto__</code>中，你可以在<code class=\\\"language-text\\\">Person.prototype</code>中设置这个成员变量，至少这是Javascript原生设计定义类的成员变量的方式。</p>\\n<p><code class=\\\"language-text\\\">__proto__</code>这个属性在刚开始的时候在浏览器中甚至是不被暴露的，因为原型链是应该被当做一个内部的概念。但是有一些浏览器加上了<code class=\\\"language-text\\\">__proto__</code>，所以最后成为了一种标准(虽然最后还是被<code class=\\\"language-text\\\">Object.getPrototypeOf()</code>代替了)。</p>\\n<p><strong>但是至今关于一个类的prototype的属性在他的实例上，并不是叫做prototype这个问题依然让我很疑惑</strong>（比如，<code class=\\\"language-text\\\">fred.prototype</code>是未定义，因为<code class=\\\"language-text\\\">fred</code>不是一个函数）。个人来说，我觉得这是造成一个Javascript开发者在原型链上比较容易搞错的地方，即使是非常有经验的开发者。</p>\\n<hr>\\n<p>这是一篇比较长的文章，额。我其实想说，已经快读到80%了，别放弃。</p>\\n<p>我们都明白当我们使用<code class=\\\"language-text\\\">obj.foo</code>的时候，Javascript其实是在依次寻找<code class=\\\"language-text\\\">obj</code>上的<code class=\\\"language-text\\\">foo</code>、<code class=\\\"language-text\\\">obj.__proto__.foo</code>、<code class=\\\"language-text\\\">obj.__proto__.__proto__.foo</code> 等等</p>\\n<p>利用class，你可能不需要知道这些机制，但是继承也是基于这个原型链的。这也就是React的类的实例是如何获取到类似<code class=\\\"language-text\\\">setState</code>的父类函数的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Greeting.prototype</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// React.Component.prototype</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Object.prototype</span>\\n\\nc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>      <span class=\\\"token comment\\\">// 找到 c.__proto__ (Greeting.prototype)</span>\\nc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">// 找到 c.__proto__.__proto__ (React.Component.prototype)</span>\\nc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">// 找到 c.__proto__.__proto__.__proto__ (Object.prototype)</span></code></pre>\\n      </div>\\n<p>换句话来说，<strong>当你使用类的时候，会这个实例的<code class=\\\"language-text\\\">__proto__</code>链来模拟类的继承</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 继承链</span>\\nGreeting\\n  → React<span class=\\\"token punctuation\\\">.</span>Component\\n    → <span class=\\\"token function\\\">Object</span> <span class=\\\"token punctuation\\\">(</span>implicitly<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 原型链</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  → Greeting<span class=\\\"token punctuation\\\">.</span>prototype\\n    → React<span class=\\\"token punctuation\\\">.</span>Component<span class=\\\"token punctuation\\\">.</span>prototype\\n      → Object<span class=\\\"token punctuation\\\">.</span>prototype</code></pre>\\n      </div>\\n<p>如上的两个链</p>\\n<hr>\\n<p>因为我们是使用<code class=\\\"language-text\\\">__proto__</code>来模拟类的继承，我们可以通过这点来确定<code class=\\\"language-text\\\">Greeting</code>是否继承于<code class=\\\"language-text\\\">React.Component</code>。我们可以顺着<code class=\\\"language-text\\\">__proto__</code>链来检查。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// `__proto__` 链</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  → Greeting<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// 🕵️ 我们从这里开始</span>\\n    → React<span class=\\\"token punctuation\\\">.</span>Component<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// ✅ 找到了!</span>\\n      → Object<span class=\\\"token punctuation\\\">.</span>prototype</code></pre>\\n      </div>\\n<p>顺便一提，<code class=\\\"language-text\\\">x</code>继承于<code class=\\\"language-text\\\">y</code>其实也是依照这种方式，它通过寻找<code class=\\\"language-text\\\">x.__proto__</code>的链来寻找是否存在<code class=\\\"language-text\\\">Y.prototype</code>。</p>\\n<p>正常来说，这本来是用来确定某个实例是否是某个类的实例的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> greeting <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype (✅ 找到了!)</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype </span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始寻找)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype (✅ 找到了!)</span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始寻找)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype</span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype (✅ 找到了!)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Banana</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始查找)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype </span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype (🙅‍ 没有找到!)</span></code></pre>\\n      </div>\\n<p>而且这也对确定一个类是否是另一个类的子类有用:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Greeting<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// greeting</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype (🕵️‍ 我们从这里开始查找)</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype (✅ 找到了!)</span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype</span></code></pre>\\n      </div>\\n<p>这个检查方式就能确定一个组件是React.Component的子类还是普通函数</p>\\n<hr>\\n<p>然而这其实并不是React真实的实现。。。😳</p>\\n<p>另一个可行的方法就是去检查原型中是否存在<code class=\\\"language-text\\\">render</code>函数，但是当时并<a href=\\\"https://github.com/facebook/react/issues/4599#issuecomment-129714112\\\">不能确定</a>React的组件API将来会如何发展的。每一种检查方式都会有它不合适的地方。现在这种检查的方式当<code class=\\\"language-text\\\">render</code>被定义成当前实例的函数的时候就会不行了，比如定义在类的成员变量上。</p>\\n<p>所以，为了防止上面的问题，React <a href=\\\"https://github.com/facebook/react/pull/4663\\\">添加了</a> 一个特殊的标志在组件的基础父类上。React会检查这个标志是否存在，这就是React为什么会知道一个组件是React组件还是普通的函数。</p>\\n<p>一般来说，这个标志被定义在<code class=\\\"language-text\\\">React.Component</code>类里:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// React内部</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nComponent<span class=\\\"token punctuation\\\">.</span>isReactClass <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 我可以像这样检查</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Greeting<span class=\\\"token punctuation\\\">.</span>isReactClass<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ 对的</span></code></pre>\\n      </div>\\n<p>但是，有些类的实现中<a href=\\\"https://github.com/scala-js/scala-js/issues/1900\\\">没有</a>继承静态的属性（或者不规范的设置了<code class=\\\"language-text\\\">__proto__</code>），然后标志就被丢失了。</p>\\n<p>这也就是为什么后来 React <a href=\\\"https://github.com/facebook/react/pull/5021\\\">移动</a>了标志到了<code class=\\\"language-text\\\">React.Component.prototype</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// React内部</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nComponent<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>isReactComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 我们可以看看是否是这样的</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Greeting<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>isReactComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ Yes</span></code></pre>\\n      </div>\\n<p><strong>顾名思义，这个变量名</strong></p>\\n<p>你可能会想，为什么这是一个对象，而不是一个bool值，这在开发使用中无伤大雅，但是在最近的几个Jest版本中(那时候Jest还不是很好用)默认打开了自动mock。它省略了mock基本数据，<a href=\\\"https://github.com/facebook/react/pull/4663#issuecomment-136533373\\\">使得React的check失效了</a>，谢谢Jest</p>\\n<p>这个<code class=\\\"language-text\\\">isReactComponent</code>的标识至今都还在<a href=\\\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L297-L300\\\">React中使用</a></p>\\n<p>如果你不继承<code class=\\\"language-text\\\">React.Component</code>，React不能在原型链上找到<code class=\\\"language-text\\\">isReactComponent</code>这个标志，所以React不会把这个类当做一个类来看，现在你就能明白<a href=\\\"https://stackoverflow.com/a/42680526/458193\\\">最频繁的问题</a> - 像<code class=\\\"language-text\\\">Cannot call a class a function</code>的错误需要通过继承React.Component解决。最后，如果你的组件的原型上有<code class=\\\"language-text\\\">render</code>函数，但是没有<code class=\\\"language-text\\\">isReactComponent</code>不存在的时候，会抛出一个<a href=\\\"https://github.com/facebook/react/pull/11168\\\">警告</a>。</p>\\n<hr>\\n<p>你可能觉得这篇文章总是在用一种吊胃口的方式在引导你向下阅读。<strong>最终的解决方案非常简单，但是我们花了大篇幅来解释<em>为什么</em>React最终会使用这个方案以及还有什么其他的选择</strong></p>\\n<p>以我的经验来看，这对于一个库的API来说是一件非常正常的事情。为了让一个API能够更简单的被使用，你总是需要考虑语言(如果可能的话，可以考虑多种语言或者语言的未来)，运行时性能，编译时或者其他的用户体验，生态系统的情况，打包的解决方案按，更少的警告等等。可能最后的解决方案并不会总是那么优雅，但是一定要非常实用。</p>\\n<p><strong>如果一个API是成功的，那么<em>他的使用者</em>完全不需要关心这个API内部是如何运行的</strong>，他们只需要关心如何做自己的应用就可以了</p>\\n<p>如果你总是保持好奇心，你会觉得知道React的这些内幕会非常开心。</p>\",\"frontmatter\":{\"title\":\"翻译：React是如何将Function转变成类的\",\"date\":\"02 December, 2018\",\"tag\":\"translate,overreacted\"}}},\"pathContext\":{\"slug\":\"translate-overreacted-how-does-react-tell-a-class-from-a-function\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-translate-overreacted-how-does-react-tell-a-class-from-a-function-1605e86aeffe6e303109.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>本文出自<a href=\\\"https://overreacted.io/\\\">overreacted</a>，这是<a href=\\\"https://mobile.twitter.com/dan_abramov\\\">Dan Abramov</a>写的博客，我觉得对很有用所以特意做了这个翻译<a href=\\\"/posts/overreacted\\\">系列</a>，原文链接请查看<a href=\\\"https://overreacted.io/how-does-react-tell-a-class-from-a-function/\\\">这里</a></p>\\n</blockquote>\\n<p>我们可以先来看一下这个用函数定义的<code class=\\\"language-text\\\">Greeting</code>组件:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>React也支持将这个组件定义成一个类:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>(我们只能使用类的定义的方式来使用一些类似于state这样的功能，知道最近的<a href=\\\"https://reactjs.org/docs/hooks-intro.html\\\">hooks</a>)</p>\\n<p>当你想要渲染<code class=\\\"language-text\\\">&lt;Greeting /&gt;</code>时，你不用关系它究竟是如何定义的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// 无论是函数定义还是类定义</span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Greeting</span> <span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>但是 <em>React 自己</em> 会关心这两种定义方式的区别</p>\\n<p>如果<code class=\\\"language-text\\\">Greeting</code>是一个函数，React会直接调用它:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 你的代码</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// React内部的实现</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span></code></pre>\\n      </div>\\n<p>但是如果<code class=\\\"language-text\\\">Greeting</code>是一个类，React需要先试用<code class=\\\"language-text\\\">new</code>来实例化它，然后在调用它的<code class=\\\"language-text\\\">render</code>函数:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 你的代码</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// React内部实现</span>\\n<span class=\\\"token keyword\\\">const</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Greeting {}</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> instance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span></code></pre>\\n      </div>\\n<p>在上面的两个例子中，React的目标都是一致的，就是将你需要渲染的React节点获取到（在这个例子中，是<code class=\\\"language-text\\\">&lt;p&gt;Hellp&lt;/p&gt;</code>）。但是这些额外的操作取决于<code class=\\\"language-text\\\">Greeting</code>是如何定义的。</p>\\n<p><strong>那么React是如何知道这个组件是使用函数定义的还是类定义的呢？</strong></p>\\n<p>就想我<a href=\\\"/posts/translate-overreacted-why-do-we-write-super-props\\\">之前的文章</a>讲的那样，<strong>对于使用React的时候，你并不<em>需要</em>了解这些</strong> 很多年里，我也不知道这些。所以请不要将这些作为你的面试题目。事实上，这篇文章更多的是讲解Javascript而不是React</p>\\n<p>这篇文章是针对那些想知道React究竟如何工作的人的。你是这样的人么？那么让我们一起来探索吧。</p>\\n<p><strong>这是一篇非常长的旅程。系好安全带吧！这篇文章并不会有太多的关于React本身，但是我们会探索到一些概念，比如<code class=\\\"language-text\\\">new</code>,<code class=\\\"language-text\\\">this</code>,<code class=\\\"language-text\\\">class</code>,<code class=\\\"language-text\\\">arrow</code>,<code class=\\\"language-text\\\">functions</code>,<code class=\\\"language-text\\\">prototypela</code>, <code class=\\\"language-text\\\">_proto_</code>,<code class=\\\"language-text\\\">instanceof</code>,以及这些东西在Javascript中是如何一起工作的。非常幸运的是，你在使用React的时候并不需要太考虑这些。不过假如你在实现React的话，那就不一样了...</strong></p>\\n<p>(如果你真的只是想知道最终的答案的话，可以直接滚动到最底下)</p>\\n<hr>\\n<p>首先，我们需要理解为什么有必要去对函数的申明方式和类的申明方式区分。可以注意一下我们在使用类的申明组件的时候发生了什么。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 如果Greeting是一个函数</span>\\n<span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span>\\n\\n<span class=\\\"token comment\\\">// 如果Greeting是一个类</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Greeting {}</span>\\n</span><span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> instance<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// &lt;p>Hello&lt;/p></span></code></pre>\\n      </div>\\n<p>让我们深度的来了解一下当使用<code class=\\\"language-text\\\">new</code>的时候，Javascript做了什么</p>\\n<hr>\\n<p>在比较早的时候，Javascript还没有定义类的方式。但是你可以通过纯函数来模拟出一个类的效果。<strong>具体的来说就是，通过对函数使用<code class=\\\"language-text\\\">new</code>调用，你可以使用<em>任何</em>函数来作为一个类的构造函数</strong>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 这只是一个函数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ Person {name: 'Fred'}</span>\\n<span class=\\\"token keyword\\\">var</span> george <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'George'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 🔴 并不起作用</span></code></pre>\\n      </div>\\n<p>这些代码依然可以使用，你可以在开发工具中尝试。</p>\\n<p>如果你在调用<code class=\\\"language-text\\\">Person(&#39;Fred&#39;)</code>的时候<strong>不使用</strong><code class=\\\"language-text\\\">new</code>操作符，函数内的<code class=\\\"language-text\\\">this</code>指向就会指向一些全局或者没有什么用的对象(比如说，<code class=\\\"language-text\\\">window</code>或者<code class=\\\"language-text\\\">undefined</code>)。如果这么使用的话，我们的代码就会报错或者执行一些设置<code class=\\\"language-text\\\">window.name</code>之类的傻兮兮的事情。</p>\\n<p>通过在调用前添加<code class=\\\"language-text\\\">new</code>的操作符。我们相当于在说: \\\"Hey Javascript，我知道<code class=\\\"language-text\\\">Person</code>是一个函数啦，但是可以不可以让我们假装它是一个构造函数\\\"。<strong>创建一个空对象，然后让<code class=\\\"language-text\\\">Person</code>函数中的<code class=\\\"language-text\\\">this</code>指向这个对象，这样我们就能够为这个对象设置像<code class=\\\"language-text\\\">this.name</code>这样的成员变量。然后将这个对象返回</strong></p>\\n<p>这就是<code class=\\\"language-text\\\">new</code>这个操作符做的事情</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 返回构造函数中的this</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">new</code>这个操作也将<code class=\\\"language-text\\\">Person.prototype</code>中的成员变量代理到了<code class=\\\"language-text\\\">fred</code>的对象上:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nPerson<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sayHi</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hi, I am '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这就是大家在Javascript推出类的写法之前模拟出来的类</p>\\n<hr>\\n<p>所以<code class=\\\"language-text\\\">new</code>在Javascript中已经存在了很长时间了，但是，classes是最近几年才有的。使用它，我们可以重新编写我们的代码，让我们离今天要探究的事情更加贴切。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Person</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hi, I am '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><em>抓住开发者想要的东西</em>在设计语言和API的时候是非常重要的。</p>\\n<p>如果你写了一个函数，Javascript不能够完全明白究竟者意味着是像<code class=\\\"language-text\\\">alert()</code>这样直接调用或者会像<code class=\\\"language-text\\\">new Person()</code>这样当做一个构造函数来调用。如果忘记掉在像<code class=\\\"language-text\\\">Person</code>这种函数前面加上<code class=\\\"language-text\\\">new</code>操作符会让代码出现一些神奇的现象。</p>\\n<p><strong>Class的预发让我们告诉Javascript的运行者: \\\"这不是只是一个函数 - 这是一个类，他有一个构造函数\\\"</strong>，当你在调用它的时候忘记使用<code class=\\\"language-text\\\">new</code>操作符的时候，Javascript会抛出一个异常:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ✅ 如果Person是一个函数，没有问题</span>\\n<span class=\\\"token comment\\\">// ✅ 如果Person是一个类，没有问题</span>\\n\\n<span class=\\\"token keyword\\\">let</span> george <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'George'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 我们忘记添加`new`</span>\\n<span class=\\\"token comment\\\">// 😳 如果用户是一个类似构造函数的函数 这个函数执行会出现一些奇怪的情况</span>\\n<span class=\\\"token comment\\\">// 🔴 如果Person是一个类，会立马抛出异常</span></code></pre>\\n      </div>\\n<p>这让我们在出现一些类似于<code class=\\\"language-text\\\">this.name</code>被赋值为<code class=\\\"language-text\\\">window.name</code>而不是<code class=\\\"language-text\\\">georage.name</code>的问题之前就能够及早的发现问题。</p>\\n<p>所以，这就代表着React需要在创建类之前加上一个<code class=\\\"language-text\\\">new</code>，我们不能够像普通的函数那样调用它，因为Javascript会抛出一个异常</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Counter</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 🔴 React 不能这么做:</span>\\n<span class=\\\"token keyword\\\">const</span> instance <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>像这么写会有问题。</p>\\n<hr>\\n<p>在我们了解React是如何处理这类问题之前，我们需要知道，大多数人在使用React的时候会用到类似于Babel这样的编译工具，从而能够在旧的浏览器上使用类似于class这样的语法。所以我们需要在我们的设计中考虑到编译工具的存在。</p>\\n<p>在一些老点的版本的Babel中，class不需要new也能够调用，但是这当时也是可以解决的 - 通过添加一些额外的代码:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// A bit simplified from Babel output:</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span> <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Cannot call a class as a function\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Our code:</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ Okay</span>\\n<span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'George'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 🔴 Can’t call class as a function</span></code></pre>\\n      </div>\\n<p>你可能可以在你的打包后的文件中能够看到这些类似的代码。其实这就是那些<code class=\\\"language-text\\\">_classCallCheck</code>的函数做的事情。(你可以使用一个疏松模式(loose mode)来通过不检查来减少最终打包后的包大小，但是这可能会让你想用上真正的class的时候变得更加复杂)</p>\\n<hr>\\n<p>现在，你应该能够明白在调用函数的时候使用<code class=\\\"language-text\\\">new</code>和不使用<code class=\\\"language-text\\\">new</code>的区别:</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th><code class=\\\"language-text\\\">new Person()</code></th>\\n<th><code class=\\\"language-text\\\">Person()</code></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code class=\\\"language-text\\\">class</code></td>\\n<td>✅ \\n<code class=\\\"language-text\\\">this</code>\\n 是 \\n<code class=\\\"language-text\\\">Person</code>\\n 的实例</td>\\n<td>🔴 \\n<code class=\\\"language-text\\\">TypeError</code></td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">function</code></td>\\n<td>✅ \\n<code class=\\\"language-text\\\">this</code>\\n 是 \\n<code class=\\\"language-text\\\">Person</code>\\n 实例</td>\\n<td>😳 \\n<code class=\\\"language-text\\\">this</code>\\n 是 \\n<code class=\\\"language-text\\\">window</code>\\n 或者 \\n<code class=\\\"language-text\\\">undefined</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>这就是为什么你需要正确的调用你的组件。 <strong>如果你的组件是使用class来定义的，React需要使用<code class=\\\"language-text\\\">new</code>来调用</strong></p>\\n<p>那么React是怎么确定组件究竟是类还是其他的类型呢?</p>\\n<p>这没有那么简单！即使我们本就可以<a href=\\\"https://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function\\\">在Javascript中区分class和函数</a>，但是这对那些通过类似Babael这样的工具编译的class没用，编译之后这些class会变成一个纯函数。React觉得很难玩儿。</p>\\n<hr>\\n<p>OK! 那是不是React可以在每次调用的时候都使用<code class=\\\"language-text\\\">new</code>？非常不幸，这也不行。</p>\\n<p>在函数中，使用<code class=\\\"language-text\\\">new</code>来调用会在内部返回一个<code class=\\\"language-text\\\">this</code>的对象。这对构造函数(比如<code class=\\\"language-text\\\">Person</code>)会比较合理，但是对于纯函数定义的组件而言，看起来就就会比较奇怪了</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 我们不希望`this`是任何对象</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这么做或许可以勉强使用，但是这里还有<em>其他的</em>两个原因让我们不使用这种方式。</p>\\n<hr>\\n<p>我们不能无脑使用<code class=\\\"language-text\\\">new</code>操作符的第一个原因就是如果函数是一个箭头函数(不是被Babel编译出来的)，使用<code class=\\\"language-text\\\">new</code>执行之后会抛出一个异常：</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Greeting</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 🔴 Greeting不是一个构造函数</span></code></pre>\\n      </div>\\n<p>这里是故意使用箭头函数的。根据箭头函数的设计，箭头函数的其中一个优点就是我们<em>不用</em>在意这个函数自己的<code class=\\\"language-text\\\">this</code> - 因为这个<code class=\\\"language-text\\\">this</code>是指向最近的普通函数的<code class=\\\"language-text\\\">this</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Friends</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> friends <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>friends<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> friends<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>friend <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token operator\\\">&lt;</span>Friend\\n        <span class=\\\"token comment\\\">// `this`会使用`render`函数的`this`</span>\\n        size<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>size<span class=\\\"token punctuation\\\">}</span>\\n        name<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>friend<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n        key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>那么所以 <em>箭头函数自己本身没有<code class=\\\"language-text\\\">this</code></em> 这就意味着他不可能成为一个构造函数!</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Person</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 🔴 这没有用</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>因此，<strong>Javascript不允许使用<code class=\\\"language-text\\\">new</code>来调用箭头函数</strong> 如果你这么做，那么你可能会导致代码出问题，所以需要提前抛出异常。这就和之前提到的为什么Javascript不能让你在调用类的时候不使用<code class=\\\"language-text\\\">new</code>的道理一样。</p>\\n<p>这是一个很合理的做法，但是这让我们之前的计划落空。React不能让我们在所有函数前面使用<code class=\\\"language-text\\\">new</code>，因为在使用箭头函数的时候会发生报错！我们只能够尝试检查一个函数是否为箭头函数，因为箭头函数没有<code class=\\\"language-text\\\">prototype</code>，并且对这类函数，不使用<code class=\\\"language-text\\\">new</code>来调用:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// undefined</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// {constructor: f}</span></code></pre>\\n      </div>\\n<p>但是这对Babel编译出来的函数<a href=\\\"https://github.com/facebook/react/issues/4599#issuecomment-136562930\\\">不起作用</a>。但是这看起来也不一定是个大问题(因为我们应该也不会在箭头函数里面写<code class=\\\"language-text\\\">this</code>)，但是这里另一个原因让我们的这个方案几乎完蛋。</p>\\n<hr>\\n<p>另一个我们不能无脑使用<code class=\\\"language-text\\\">new</code>操作符的原因是我们还需要排除那些React支持的直接返回字符串或者其他基础类型的组件。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Hello'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ 'Hello'</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😳 Greeting {}</span></code></pre>\\n      </div>\\n<p>额。。。我们需要再一次看一下<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\\\"><code class=\\\"language-text\\\">new</code>操作符</a>的设计。根据我们之前所知道的，<code class=\\\"language-text\\\">new</code>告诉Javascript引擎去创建一个对象，对构造函数的内部的<code class=\\\"language-text\\\">this</code>赋值，然后在最后返回一个对象给我们。</p>\\n<p>但是Javascript也允许一个使用<code class=\\\"language-text\\\">new</code>调用的函数返回一个另外的对象来覆盖这个函数内部的this。想必这是为了考虑这可能对类似重用对象实例之类的模式比较有用吧:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 懒加载</span>\\n<span class=\\\"token keyword\\\">var</span> zeroVector <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Vector</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>zeroVector <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// Reuse the same instance</span>\\n      <span class=\\\"token keyword\\\">return</span> zeroVector<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    zeroVector <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😲 b === c</span></code></pre>\\n      </div>\\n<p>但是，当一个函数返回非对象类型的值的时候，<code class=\\\"language-text\\\">new</code>就会无视这个返回值。比如说如果你返回一个字符串或者数字，它就会当做什么都没有返回。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Answer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">Answer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ 42</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Answer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😳 Answer {}</span></code></pre>\\n      </div>\\n<p>因为使用<code class=\\\"language-text\\\">new</code>来调用函数的时候，返回一个基本类型(比如数字或者字符串)会被无视。所以如果React无脑使用<code class=\\\"language-text\\\">new</code>,就不能够支持哪些直接返回字符串类型的组建了!</p>\\n<p>这显然对开发者来说是不可接受的，所以我们只能在换个法子。</p>\\n<hr>\\n<p>至今为止，我们一共总结了什么？React需要在调用class（包括Babel编译输出的）使用<code class=\\\"language-text\\\">new</code>操作符，但是我们需要在调用普通函数或者箭头函数的时候不使用<code class=\\\"language-text\\\">new</code>操作符。而现在好像还没有一个可行的方案来区分他们。</p>\\n<p><strong>如果我们不能够解决普遍的问题，那我们可以尝试去解决哪个比较特殊的问题吗?</strong></p>\\n<p>当我们使用类来定义组建的饿时候，我们一般会去继承<code class=\\\"language-text\\\">React.Component</code>，为了使用一些内置的函数，比如<code class=\\\"language-text\\\">this.setState()</code>。<strong>换个想法来看，我们去区分所有的类无法做到的话，我们是不是可以考虑只检查React.Component的子类呢</strong></p>\\n<p>Spoiler: 这正式React做的事情</p>\\n<hr>\\n<p>当然，常用的用来检查<code class=\\\"language-text\\\">Greeting</code>是否是React组件的类的子类的方式就是取检查是否<code class=\\\"language-text\\\">Greeting.prototype</code>是否是React.Component的实例:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">B</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">B</span><span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span></code></pre>\\n      </div>\\n<p>我知道你在想什么，这段代码的运行结果为什么会是这样？！为了回答这个问题，我们需要理解Javascript原型。</p>\\n<p>你可能对Javascript原型链非常熟悉。每个在Javascript中的对象都会有一个原型，当我们在调用<code class=\\\"language-text\\\">gred.sayHi()</code>但是<code class=\\\"language-text\\\">fred</code>的对象没有<code class=\\\"language-text\\\">sayHi</code>的属性的时候，我们会在<code class=\\\"language-text\\\">fred</code>的原型链上寻找<code class=\\\"language-text\\\">sayHi</code>的属性，如果我们不能够在原型链上找到它，我们会在这个原型链上的下一个原型链（<code class=\\\"language-text\\\">fred</code>的原型的原型），就这么循环执行下去。</p>\\n<p>我不是在开玩笑...<strong>有个很奇怪的问题，一个函数或者类的<code class=\\\"language-text\\\">prototype</code>属性 <em>并不</em> 指向这个实例的<code class=\\\"language-text\\\">prototype</code></strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Person<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 🤪 Not Person's prototype</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Person<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 😳 Person's prototype</span></code></pre>\\n      </div>\\n<p>所以\\\"原型链\\\"应该是类似于<code class=\\\"language-text\\\">__proto__.__proto__.__proto__</code>，而不是<code class=\\\"language-text\\\">prototype.prototype.prototype</code>。我也是很多年才明白这点。</p>\\n<p>在类或者函数上设置了<code class=\\\"language-text\\\">prototype</code>, <strong>但最后通过<code class=\\\"language-text\\\">new</code>操作符创建的对象我们是通过<code class=\\\"language-text\\\">__proto__</code>来获取原型上属性</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Person</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nPerson<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">sayHi</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hi, I am '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> fred <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Fred'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Sets `fred.__proto__` to `Person.prototype`</span></code></pre>\\n      </div>\\n<p>Javascript就是使用<code class=\\\"language-text\\\">__proto__</code>链来查找属性的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">fred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 1. fred是否含有这个sayHi属性? No.</span>\\n<span class=\\\"token comment\\\">// 2. fred.__proto__ 是否有 sayHi的属性 ？ 是的. 那么就调用它!</span>\\n\\nfred<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 1. fred是否含有这个toString属性? No.</span>\\n<span class=\\\"token comment\\\">// 2. fred.__proto__ 是否有 toString的属性 ？ No.</span>\\n<span class=\\\"token comment\\\">// 3. fred.__proto__.__proto__ 是否有 toString的属性 ？ 是的. 那么就调用它!</span></code></pre>\\n      </div>\\n<p>在实际使用场景中，你可能不需要自己去在代码中直接接触<code class=\\\"language-text\\\">__proto__</code>，除非你需要对原型链上相关的东西做调试。如果你想要让某个成员变量挂载在<code class=\\\"language-text\\\">fred.__proto__</code>中，你可以在<code class=\\\"language-text\\\">Person.prototype</code>中设置这个成员变量，至少这是Javascript原生设计定义类的成员变量的方式。</p>\\n<p><code class=\\\"language-text\\\">__proto__</code>这个属性在刚开始的时候在浏览器中甚至是不被暴露的，因为原型链是应该被当做一个内部的概念。但是有一些浏览器加上了<code class=\\\"language-text\\\">__proto__</code>，所以最后成为了一种标准(虽然最后还是被<code class=\\\"language-text\\\">Object.getPrototypeOf()</code>代替了)。</p>\\n<p><strong>但是至今关于一个类的prototype的属性在他的实例上，并不是叫做prototype这个问题依然让我很疑惑</strong>（比如，<code class=\\\"language-text\\\">fred.prototype</code>是未定义，因为<code class=\\\"language-text\\\">fred</code>不是一个函数）。个人来说，我觉得这是造成一个Javascript开发者在原型链上比较容易搞错的地方，即使是非常有经验的开发者。</p>\\n<hr>\\n<p>这是一篇比较长的文章，额。我其实想说，已经快读到80%了，别放弃。</p>\\n<p>我们都明白当我们使用<code class=\\\"language-text\\\">obj.foo</code>的时候，Javascript其实是在依次寻找<code class=\\\"language-text\\\">obj</code>上的<code class=\\\"language-text\\\">foo</code>、<code class=\\\"language-text\\\">obj.__proto__.foo</code>、<code class=\\\"language-text\\\">obj.__proto__.__proto__.foo</code> 等等</p>\\n<p>利用class，你可能不需要知道这些机制，但是继承也是基于这个原型链的。这也就是React的类的实例是如何获取到类似<code class=\\\"language-text\\\">setState</code>的父类函数的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>p<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>p<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> c <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Greeting.prototype</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// React.Component.prototype</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Object.prototype</span>\\n\\nc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>      <span class=\\\"token comment\\\">// 找到 c.__proto__ (Greeting.prototype)</span>\\nc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">// 找到 c.__proto__.__proto__ (React.Component.prototype)</span>\\nc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\">// 找到 c.__proto__.__proto__.__proto__ (Object.prototype)</span></code></pre>\\n      </div>\\n<p>换句话来说，<strong>当你使用类的时候，会这个实例的<code class=\\\"language-text\\\">__proto__</code>链来模拟类的继承</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 继承链</span>\\nGreeting\\n  → React<span class=\\\"token punctuation\\\">.</span>Component\\n    → <span class=\\\"token function\\\">Object</span> <span class=\\\"token punctuation\\\">(</span>implicitly<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 原型链</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  → Greeting<span class=\\\"token punctuation\\\">.</span>prototype\\n    → React<span class=\\\"token punctuation\\\">.</span>Component<span class=\\\"token punctuation\\\">.</span>prototype\\n      → Object<span class=\\\"token punctuation\\\">.</span>prototype</code></pre>\\n      </div>\\n<p>如上的两个链</p>\\n<hr>\\n<p>因为我们是使用<code class=\\\"language-text\\\">__proto__</code>来模拟类的继承，我们可以通过这点来确定<code class=\\\"language-text\\\">Greeting</code>是否继承于<code class=\\\"language-text\\\">React.Component</code>。我们可以顺着<code class=\\\"language-text\\\">__proto__</code>链来检查。</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// `__proto__` 链</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  → Greeting<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// 🕵️ 我们从这里开始</span>\\n    → React<span class=\\\"token punctuation\\\">.</span>Component<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token comment\\\">// ✅ 找到了!</span>\\n      → Object<span class=\\\"token punctuation\\\">.</span>prototype</code></pre>\\n      </div>\\n<p>顺便一提，<code class=\\\"language-text\\\">x</code>继承于<code class=\\\"language-text\\\">y</code>其实也是依照这种方式，它通过寻找<code class=\\\"language-text\\\">x.__proto__</code>的链来寻找是否存在<code class=\\\"language-text\\\">Y.prototype</code>。</p>\\n<p>正常来说，这本来是用来确定某个实例是否是某个类的实例的:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> greeting <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Greeting</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype (✅ 找到了!)</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype </span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始寻找)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype (✅ 找到了!)</span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始寻找)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype</span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype (✅ 找到了!)</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>greeting <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Banana</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n<span class=\\\"token comment\\\">// greeting (🕵️‍ 我们从这里开始查找)</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype </span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype (🙅‍ 没有找到!)</span></code></pre>\\n      </div>\\n<p>而且这也对确定一个类是否是另一个类的子类有用:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Greeting<span class=\\\"token punctuation\\\">.</span>prototype <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// greeting</span>\\n<span class=\\\"token comment\\\">//   .__proto__ → Greeting.prototype (🕵️‍ 我们从这里开始查找)</span>\\n<span class=\\\"token comment\\\">//     .__proto__ → React.Component.prototype (✅ 找到了!)</span>\\n<span class=\\\"token comment\\\">//       .__proto__ → Object.prototype</span></code></pre>\\n      </div>\\n<p>这个检查方式就能确定一个组件是React.Component的子类还是普通函数</p>\\n<hr>\\n<p>然而这其实并不是React真实的实现。。。😳</p>\\n<p>另一个可行的方法就是去检查原型中是否存在<code class=\\\"language-text\\\">render</code>函数，但是当时并<a href=\\\"https://github.com/facebook/react/issues/4599#issuecomment-129714112\\\">不能确定</a>React的组件API将来会如何发展的。每一种检查方式都会有它不合适的地方。现在这种检查的方式当<code class=\\\"language-text\\\">render</code>被定义成当前实例的函数的时候就会不行了，比如定义在类的成员变量上。</p>\\n<p>所以，为了防止上面的问题，React <a href=\\\"https://github.com/facebook/react/pull/4663\\\">添加了</a> 一个特殊的标志在组件的基础父类上。React会检查这个标志是否存在，这就是React为什么会知道一个组件是React组件还是普通的函数。</p>\\n<p>一般来说，这个标志被定义在<code class=\\\"language-text\\\">React.Component</code>类里:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// React内部</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nComponent<span class=\\\"token punctuation\\\">.</span>isReactClass <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 我可以像这样检查</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Greeting<span class=\\\"token punctuation\\\">.</span>isReactClass<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ 对的</span></code></pre>\\n      </div>\\n<p>但是，有些类的实现中<a href=\\\"https://github.com/scala-js/scala-js/issues/1900\\\">没有</a>继承静态的属性（或者不规范的设置了<code class=\\\"language-text\\\">__proto__</code>），然后标志就被丢失了。</p>\\n<p>这也就是为什么后来 React <a href=\\\"https://github.com/facebook/react/pull/5021\\\">移动</a>了标志到了<code class=\\\"language-text\\\">React.Component.prototype</code>:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// React内部</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nComponent<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>isReactComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 我们可以看看是否是这样的</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Greeting<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>isReactComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// ✅ Yes</span></code></pre>\\n      </div>\\n<p><strong>顾名思义，这个变量名</strong></p>\\n<p>你可能会想，为什么这是一个对象，而不是一个bool值，这在开发使用中无伤大雅，但是在最近的几个Jest版本中(那时候Jest还不是很好用)默认打开了自动mock。它省略了mock基本数据，<a href=\\\"https://github.com/facebook/react/pull/4663#issuecomment-136533373\\\">使得React的check失效了</a>，谢谢Jest</p>\\n<p>这个<code class=\\\"language-text\\\">isReactComponent</code>的标识至今都还在<a href=\\\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L297-L300\\\">React中使用</a></p>\\n<p>如果你不继承<code class=\\\"language-text\\\">React.Component</code>，React不能在原型链上找到<code class=\\\"language-text\\\">isReactComponent</code>这个标志，所以React不会把这个类当做一个类来看，现在你就能明白<a href=\\\"https://stackoverflow.com/a/42680526/458193\\\">最频繁的问题</a> - 像<code class=\\\"language-text\\\">Cannot call a class a function</code>的错误需要通过继承React.Component解决。最后，如果你的组件的原型上有<code class=\\\"language-text\\\">render</code>函数，但是没有<code class=\\\"language-text\\\">isReactComponent</code>不存在的时候，会抛出一个<a href=\\\"https://github.com/facebook/react/pull/11168\\\">警告</a>。</p>\\n<hr>\\n<p>你可能觉得这篇文章总是在用一种吊胃口的方式在引导你向下阅读。<strong>最终的解决方案非常简单，但是我们花了大篇幅来解释<em>为什么</em>React最终会使用这个方案以及还有什么其他的选择</strong></p>\\n<p>以我的经验来看，这对于一个库的API来说是一件非常正常的事情。为了让一个API能够更简单的被使用，你总是需要考虑语言(如果可能的话，可以考虑多种语言或者语言的未来)，运行时性能，编译时或者其他的用户体验，生态系统的情况，打包的解决方案按，更少的警告等等。可能最后的解决方案并不会总是那么优雅，但是一定要非常实用。</p>\\n<p><strong>如果一个API是成功的，那么<em>他的使用者</em>完全不需要关心这个API内部是如何运行的</strong>，他们只需要关心如何做自己的应用就可以了</p>\\n<p>如果你总是保持好奇心，你会觉得知道React的这些内幕会非常开心。</p>\",\"frontmatter\":{\"title\":\"翻译：React是如何将Function转变成类的\",\"date\":\"02 December, 2018\",\"tag\":\"translate,overreacted\"}}},\"pathContext\":{\"slug\":\"translate-overreacted-how-does-react-tell-a-class-from-a-function\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-translate-overreacted-how-does-react-tell-a-class-from-a-function.json\n// module id = 396\n// module chunks = 9756229565306"],"sourceRoot":""}